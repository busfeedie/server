# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activerecord/all/activerecord.rbi
#
# activerecord-7.1.2

module Arel
  def self.arel_node?(value); end
  def self.fetch_attribute(value, &block); end
  def self.sql(sql_string, *positional_binds, **named_binds); end
  def self.star; end
end
class Arel::ArelError < StandardError
end
class Arel::EmptyJoinError < Arel::ArelError
end
class Arel::BindError < Arel::ArelError
  def initialize(message, sql = nil); end
end
module Arel::Crud
  def compile_delete(key = nil, having_clause = nil, group_values_columns = nil); end
  def compile_insert(values); end
  def compile_update(values, key = nil, having_clause = nil, group_values_columns = nil); end
  def create_insert; end
end
module Arel::FactoryMethods
  def cast(name, type); end
  def coalesce(*exprs); end
  def create_and(clauses); end
  def create_false; end
  def create_join(to, constraint = nil, klass = nil); end
  def create_on(expr); end
  def create_string_join(to); end
  def create_table_alias(relation, name); end
  def create_true; end
  def grouping(expr); end
  def lower(column); end
end
module Arel::Expressions
  def average; end
  def count(distinct = nil); end
  def extract(field); end
  def maximum; end
  def minimum; end
  def sum; end
end
module Arel::Predications
  def between(other); end
  def concat(other); end
  def contains(other); end
  def does_not_match(other, escape = nil, case_sensitive = nil); end
  def does_not_match_all(others, escape = nil); end
  def does_not_match_any(others, escape = nil); end
  def does_not_match_regexp(other, case_sensitive = nil); end
  def eq(other); end
  def eq_all(others); end
  def eq_any(others); end
  def grouping_all(method_id, others, *extras); end
  def grouping_any(method_id, others, *extras); end
  def gt(right); end
  def gt_all(others); end
  def gt_any(others); end
  def gteq(right); end
  def gteq_all(others); end
  def gteq_any(others); end
  def in(other); end
  def in_all(others); end
  def in_any(others); end
  def infinity?(value); end
  def is_distinct_from(other); end
  def is_not_distinct_from(other); end
  def lt(right); end
  def lt_all(others); end
  def lt_any(others); end
  def lteq(right); end
  def lteq_all(others); end
  def lteq_any(others); end
  def matches(other, escape = nil, case_sensitive = nil); end
  def matches_all(others, escape = nil, case_sensitive = nil); end
  def matches_any(others, escape = nil, case_sensitive = nil); end
  def matches_regexp(other, case_sensitive = nil); end
  def not_between(other); end
  def not_eq(other); end
  def not_eq_all(others); end
  def not_eq_any(others); end
  def not_in(other); end
  def not_in_all(others); end
  def not_in_any(others); end
  def open_ended?(value); end
  def overlaps(other); end
  def quoted_array(others); end
  def quoted_node(other); end
  def unboundable?(value); end
  def when(right); end
end
module Arel::FilterPredications
  def filter(expr); end
end
module Arel::WindowPredications
  def over(expr = nil); end
end
module Arel::Math
  def &(other); end
  def *(other); end
  def +(other); end
  def -(other); end
  def /(other); end
  def <<(other); end
  def >>(other); end
  def ^(other); end
  def |(other); end
  def ~; end
end
module Arel::AliasPredication
  def as(other); end
end
module Arel::OrderPredications
  def asc; end
  def desc; end
end
class Arel::Table
  def ==(other); end
  def [](name, table = nil); end
  def able_to_type_cast?; end
  def alias(name = nil); end
  def eql?(other); end
  def from; end
  def group(*columns); end
  def hash; end
  def having(expr); end
  def initialize(name, as: nil, klass: nil, type_caster: nil); end
  def join(relation, klass = nil); end
  def name; end
  def name=(arg0); end
  def order(*expr); end
  def outer_join(relation); end
  def project(*things); end
  def self.engine; end
  def self.engine=(arg0); end
  def skip(amount); end
  def table_alias; end
  def take(amount); end
  def type_cast_for_database(attr_name, value); end
  def type_caster; end
  def type_for_attribute(name); end
  def where(condition); end
  include Arel::AliasPredication
  include Arel::FactoryMethods
end
module Arel::Attributes
end
class Anonymous_Struct_22 < Struct
  def name; end
  def name=(_); end
  def relation; end
  def relation=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class Arel::Attributes::Attribute < Anonymous_Struct_22
  def able_to_type_cast?; end
  def lower; end
  def type_cast_for_database(value); end
  def type_caster; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
module Arel::Visitors
end
class Arel::Visitors::Visitor
  def accept(object, collector = nil); end
  def dispatch; end
  def get_dispatch_cache; end
  def initialize; end
  def self.dispatch_cache; end
  def visit(object, collector = nil); end
end
class Arel::Visitors::UnsupportedVisitError < StandardError
  def initialize(object); end
end
class Arel::Visitors::ToSql < Arel::Visitors::Visitor
  def aggregate(name, o, collector); end
  def bind_block; end
  def build_subselect(key, o); end
  def collect_ctes(children, collector); end
  def collect_nodes_for(nodes, collector, spacer, connector = nil); end
  def collect_optimizer_hints(o, collector); end
  def compile(node, collector = nil); end
  def has_group_by_and_having?(o); end
  def has_join_sources?(o); end
  def has_limit_or_offset_or_orders?(o); end
  def infix_value(o, collector, value); end
  def infix_value_with_paren(o, collector, value, suppress_parens = nil); end
  def initialize(connection); end
  def inject_join(list, collector, join_str); end
  def is_distinct_from(o, collector); end
  def maybe_visit(thing, collector); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def quote(value); end
  def quote_column_name(name); end
  def quote_table_name(name); end
  def sanitize_as_sql_comment(value); end
  def unboundable?(value); end
  def unsupported(o, collector); end
  def visit_ActiveModel_Attribute(o, collector); end
  def visit_ActiveSupport_Multibyte_Chars(o, collector); end
  def visit_ActiveSupport_StringInquirer(o, collector); end
  def visit_Arel_Attributes_Attribute(o, collector); end
  def visit_Arel_Nodes_And(o, collector); end
  def visit_Arel_Nodes_As(o, collector); end
  def visit_Arel_Nodes_Ascending(o, collector); end
  def visit_Arel_Nodes_Assignment(o, collector); end
  def visit_Arel_Nodes_Avg(o, collector); end
  def visit_Arel_Nodes_Between(o, collector); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_BindParam(o, collector); end
  def visit_Arel_Nodes_BoundSqlLiteral(o, collector); end
  def visit_Arel_Nodes_Case(o, collector); end
  def visit_Arel_Nodes_Casted(o, collector); end
  def visit_Arel_Nodes_Comment(o, collector); end
  def visit_Arel_Nodes_Count(o, collector); end
  def visit_Arel_Nodes_Cte(o, collector); end
  def visit_Arel_Nodes_CurrentRow(o, collector); end
  def visit_Arel_Nodes_DeleteStatement(o, collector); end
  def visit_Arel_Nodes_Descending(o, collector); end
  def visit_Arel_Nodes_Distinct(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_Else(o, collector); end
  def visit_Arel_Nodes_Equality(o, collector); end
  def visit_Arel_Nodes_Except(o, collector); end
  def visit_Arel_Nodes_Exists(o, collector); end
  def visit_Arel_Nodes_Extract(o, collector); end
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_Filter(o, collector); end
  def visit_Arel_Nodes_Following(o, collector); end
  def visit_Arel_Nodes_Fragments(o, collector); end
  def visit_Arel_Nodes_FullOuterJoin(o, collector); end
  def visit_Arel_Nodes_GreaterThan(o, collector); end
  def visit_Arel_Nodes_GreaterThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Group(o, collector); end
  def visit_Arel_Nodes_Grouping(o, collector); end
  def visit_Arel_Nodes_HomogeneousIn(o, collector); end
  def visit_Arel_Nodes_In(o, collector); end
  def visit_Arel_Nodes_InfixOperation(o, collector); end
  def visit_Arel_Nodes_InnerJoin(o, collector); end
  def visit_Arel_Nodes_InsertStatement(o, collector); end
  def visit_Arel_Nodes_Intersect(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_JoinSource(o, collector); end
  def visit_Arel_Nodes_LessThan(o, collector); end
  def visit_Arel_Nodes_LessThanOrEqual(o, collector); end
  def visit_Arel_Nodes_Limit(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_Max(o, collector); end
  def visit_Arel_Nodes_Min(o, collector); end
  def visit_Arel_Nodes_NamedFunction(o, collector); end
  def visit_Arel_Nodes_NamedWindow(o, collector); end
  def visit_Arel_Nodes_Not(o, collector); end
  def visit_Arel_Nodes_NotEqual(o, collector); end
  def visit_Arel_Nodes_NotIn(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_NullsFirst(o, collector); end
  def visit_Arel_Nodes_NullsLast(o, collector); end
  def visit_Arel_Nodes_Offset(o, collector); end
  def visit_Arel_Nodes_On(o, collector); end
  def visit_Arel_Nodes_OptimizerHints(o, collector); end
  def visit_Arel_Nodes_Or(o, collector); end
  def visit_Arel_Nodes_OuterJoin(o, collector); end
  def visit_Arel_Nodes_Over(o, collector); end
  def visit_Arel_Nodes_Preceding(o, collector); end
  def visit_Arel_Nodes_Quoted(o, collector); end
  def visit_Arel_Nodes_Range(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RightOuterJoin(o, collector); end
  def visit_Arel_Nodes_Rows(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectOptions(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_SqlLiteral(o, collector); end
  def visit_Arel_Nodes_StringJoin(o, collector); end
  def visit_Arel_Nodes_Sum(o, collector); end
  def visit_Arel_Nodes_TableAlias(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
  def visit_Arel_Nodes_UnaryOperation(o, collector); end
  def visit_Arel_Nodes_Union(o, collector); end
  def visit_Arel_Nodes_UnionAll(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
  def visit_Arel_Nodes_UpdateStatement(o, collector); end
  def visit_Arel_Nodes_ValuesList(o, collector); end
  def visit_Arel_Nodes_When(o, collector); end
  def visit_Arel_Nodes_Window(o, collector); end
  def visit_Arel_Nodes_With(o, collector); end
  def visit_Arel_Nodes_WithRecursive(o, collector); end
  def visit_Arel_SelectManager(o, collector); end
  def visit_Arel_Table(o, collector); end
  def visit_Array(o, collector); end
  def visit_BigDecimal(o, collector); end
  def visit_Class(o, collector); end
  def visit_Date(o, collector); end
  def visit_DateTime(o, collector); end
  def visit_FalseClass(o, collector); end
  def visit_Float(o, collector); end
  def visit_Hash(o, collector); end
  def visit_Integer(o, collector); end
  def visit_NilClass(o, collector); end
  def visit_Set(o, collector); end
  def visit_String(o, collector); end
  def visit_Symbol(o, collector); end
  def visit_Time(o, collector); end
  def visit_TrueClass(o, collector); end
end
class Arel::Visitors::SQLite < Arel::Visitors::ToSql
  def visit_Arel_Nodes_False(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lock(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_True(o, collector); end
end
class Arel::Visitors::PostgreSQL < Arel::Visitors::ToSql
  def bind_block; end
  def grouping_array_or_grouping_element(o, collector); end
  def grouping_parentheses(o, collector); end
  def visit_Arel_Nodes_Cube(o, collector); end
  def visit_Arel_Nodes_DistinctOn(o, collector); end
  def visit_Arel_Nodes_DoesNotMatch(o, collector); end
  def visit_Arel_Nodes_GroupingElement(o, collector); end
  def visit_Arel_Nodes_GroupingSet(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_Lateral(o, collector); end
  def visit_Arel_Nodes_Matches(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_RollUp(o, collector); end
end
class Arel::Visitors::MySQL < Arel::Visitors::ToSql
  def build_subselect(key, o); end
  def prepare_delete_statement(o); end
  def prepare_update_statement(o); end
  def visit_Arel_Nodes_Bin(o, collector); end
  def visit_Arel_Nodes_Concat(o, collector); end
  def visit_Arel_Nodes_Cte(o, collector); end
  def visit_Arel_Nodes_IsDistinctFrom(o, collector); end
  def visit_Arel_Nodes_IsNotDistinctFrom(o, collector); end
  def visit_Arel_Nodes_NotRegexp(o, collector); end
  def visit_Arel_Nodes_NullsFirst(o, collector); end
  def visit_Arel_Nodes_Regexp(o, collector); end
  def visit_Arel_Nodes_SelectCore(o, collector); end
  def visit_Arel_Nodes_SelectStatement(o, collector); end
  def visit_Arel_Nodes_UnqualifiedColumn(o, collector); end
end
class Arel::Visitors::Dot < Arel::Visitors::Visitor
  def accept(object, collector); end
  def edge(name); end
  def initialize; end
  def quote(string); end
  def to_dot; end
  def visit(o); end
  def visit_ActiveModel_Attribute(o); end
  def visit_Arel_Attributes_Attribute(o); end
  def visit_Arel_Nodes_And(o); end
  def visit_Arel_Nodes_Binary(o); end
  def visit_Arel_Nodes_BindParam(o); end
  def visit_Arel_Nodes_Case(o); end
  def visit_Arel_Nodes_Casted(o); end
  def visit_Arel_Nodes_Comment(o); end
  def visit_Arel_Nodes_Count(o); end
  def visit_Arel_Nodes_CurrentRow(o); end
  def visit_Arel_Nodes_DeleteStatement(o); end
  def visit_Arel_Nodes_Distinct(o); end
  def visit_Arel_Nodes_Extract(o); end
  def visit_Arel_Nodes_Function(o); end
  def visit_Arel_Nodes_HomogeneousIn(o); end
  def visit_Arel_Nodes_InfixOperation(o); end
  def visit_Arel_Nodes_InsertStatement(o); end
  def visit_Arel_Nodes_NamedFunction(o); end
  def visit_Arel_Nodes_NamedWindow(o); end
  def visit_Arel_Nodes_NotRegexp(o); end
  def visit_Arel_Nodes_Ordering(o); end
  def visit_Arel_Nodes_Regexp(o); end
  def visit_Arel_Nodes_SelectCore(o); end
  def visit_Arel_Nodes_SelectStatement(o); end
  def visit_Arel_Nodes_SqlLiteral(o); end
  def visit_Arel_Nodes_StringJoin(o); end
  def visit_Arel_Nodes_TableAlias(o); end
  def visit_Arel_Nodes_Unary(o); end
  def visit_Arel_Nodes_UnaryOperation(o); end
  def visit_Arel_Nodes_UpdateStatement(o); end
  def visit_Arel_Nodes_ValuesList(o); end
  def visit_Arel_Nodes_Window(o); end
  def visit_Arel_Nodes_With(o); end
  def visit_Arel_Table(o); end
  def visit_Array(o); end
  def visit_BigDecimal(o); end
  def visit_Date(o); end
  def visit_DateTime(o); end
  def visit_FalseClass(o); end
  def visit_Float(o); end
  def visit_Hash(o); end
  def visit_Integer(o); end
  def visit_NilClass(o); end
  def visit_Set(o); end
  def visit_String(o); end
  def visit_Symbol(o); end
  def visit_Time(o); end
  def visit_TrueClass(o); end
  def visit__children(o); end
  def visit__no_edges(o); end
  def visit__regexp(o); end
  def visit_edge(o, method); end
  def with_node(node); end
end
class Arel::Visitors::Dot::Node
  def fields; end
  def fields=(arg0); end
  def id; end
  def id=(arg0); end
  def initialize(name, id, fields = nil); end
  def name; end
  def name=(arg0); end
end
class Anonymous_Struct_23 < Struct
  def from; end
  def from=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def to; end
  def to=(_); end
end
class Arel::Visitors::Dot::Edge < Anonymous_Struct_23
end
module Arel::Collectors
end
class Arel::Collectors::PlainString
  def <<(str); end
  def initialize; end
  def value; end
end
class Arel::Collectors::SQLString < Arel::Collectors::PlainString
  def add_bind(bind); end
  def add_binds(binds, proc_for_binds = nil, &block); end
  def initialize(*arg0); end
  def preparable; end
  def preparable=(arg0); end
end
class Arel::TreeManager
  def ast; end
  def initialize_copy(other); end
  def to_dot; end
  def to_sql(engine = nil); end
  include Arel::FactoryMethods
end
module Arel::TreeManager::StatementMethods
  def key; end
  def key=(key); end
  def offset(offset); end
  def order(*expr); end
  def take(limit); end
  def where(expr); end
  def wheres=(exprs); end
end
class Arel::InsertManager < Arel::TreeManager
  def columns; end
  def create_values(values); end
  def create_values_list(rows); end
  def initialize(table = nil); end
  def insert(fields); end
  def into(table); end
  def select(select); end
  def values=(val); end
end
class Arel::SelectManager < Arel::TreeManager
  def as(other); end
  def collapse(exprs); end
  def comment(*values); end
  def constraints; end
  def distinct(value = nil); end
  def distinct_on(value); end
  def except(other); end
  def exists; end
  def from(table); end
  def froms; end
  def group(*columns); end
  def having(expr); end
  def initialize(table = nil); end
  def initialize_copy(other); end
  def intersect(other); end
  def join(relation, klass = nil); end
  def join_sources; end
  def lateral(table_name = nil); end
  def limit; end
  def limit=(limit); end
  def lock(locking = nil); end
  def locked; end
  def minus(other); end
  def offset; end
  def offset=(amount); end
  def on(*exprs); end
  def optimizer_hints(*hints); end
  def order(*expr); end
  def orders; end
  def outer_join(relation); end
  def project(*projections); end
  def projections; end
  def projections=(projections); end
  def skip(amount); end
  def source; end
  def take(limit); end
  def taken; end
  def union(operation, other = nil); end
  def where(expr); end
  def where_sql(engine = nil); end
  def window(name); end
  def with(*subqueries); end
  include Arel::Crud
end
class Arel::UpdateManager < Arel::TreeManager
  def group(columns); end
  def having(expr); end
  def initialize(table = nil); end
  def set(values); end
  def table(table); end
  include Arel::TreeManager::StatementMethods
end
class Arel::DeleteManager < Arel::TreeManager
  def from(relation); end
  def group(columns); end
  def having(expr); end
  def initialize(table = nil); end
  include Arel::TreeManager::StatementMethods
end
module Arel::Nodes
  def self.build_quoted(other, attribute = nil); end
end
class Arel::Nodes::Node
  def and(right); end
  def equality?; end
  def fetch_attribute; end
  def invert; end
  def not; end
  def or(right); end
  def to_sql(engine = nil); end
  include Arel::FactoryMethods
end
class Arel::Nodes::NodeExpression < Arel::Nodes::Node
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::SelectStatement < Arel::Nodes::NodeExpression
  def ==(other); end
  def cores; end
  def eql?(other); end
  def hash; end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def limit; end
  def limit=(arg0); end
  def lock; end
  def lock=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def with; end
  def with=(arg0); end
end
class Arel::Nodes::SelectCore < Arel::Nodes::Node
  def ==(other); end
  def comment; end
  def comment=(arg0); end
  def eql?(other); end
  def from; end
  def from=(value); end
  def froms; end
  def froms=(value); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def optimizer_hints; end
  def optimizer_hints=(arg0); end
  def projections; end
  def projections=(arg0); end
  def set_quantifier; end
  def set_quantifier=(arg0); end
  def source; end
  def source=(arg0); end
  def wheres; end
  def wheres=(arg0); end
  def windows; end
  def windows=(arg0); end
end
class Arel::Nodes::InsertStatement < Arel::Nodes::Node
  def ==(other); end
  def columns; end
  def columns=(arg0); end
  def eql?(other); end
  def hash; end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def relation; end
  def relation=(arg0); end
  def select; end
  def select=(arg0); end
  def values; end
  def values=(arg0); end
end
class Arel::Nodes::UpdateStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil); end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def values; end
  def values=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::BindParam < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def infinite?; end
  def initialize(value); end
  def nil?; end
  def unboundable?; end
  def value; end
  def value_before_type_cast; end
end
class Arel::Nodes::Fragments < Arel::Nodes::Node
  def +(other); end
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(values = nil); end
  def initialize_copy(other); end
  def values; end
end
class Arel::Nodes::Distinct < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::True < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::False < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Unary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def expr; end
  def expr=(arg0); end
  def hash; end
  def initialize(expr); end
  def value; end
end
class Arel::Nodes::Bin < Arel::Nodes::Unary
end
class Arel::Nodes::Cube < Arel::Nodes::Unary
end
class Arel::Nodes::DistinctOn < Arel::Nodes::Unary
end
class Arel::Nodes::Group < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingElement < Arel::Nodes::Unary
end
class Arel::Nodes::GroupingSet < Arel::Nodes::Unary
end
class Arel::Nodes::Lateral < Arel::Nodes::Unary
end
class Arel::Nodes::Limit < Arel::Nodes::Unary
end
class Arel::Nodes::Lock < Arel::Nodes::Unary
end
class Arel::Nodes::Not < Arel::Nodes::Unary
end
class Arel::Nodes::Offset < Arel::Nodes::Unary
end
class Arel::Nodes::On < Arel::Nodes::Unary
end
class Arel::Nodes::OptimizerHints < Arel::Nodes::Unary
end
class Arel::Nodes::RollUp < Arel::Nodes::Unary
end
class Arel::Nodes::Grouping < Arel::Nodes::Unary
  def fetch_attribute(&block); end
end
class Arel::Nodes::HomogeneousIn < Arel::Nodes::Node
  def ==(other); end
  def attribute; end
  def casted_values; end
  def eql?(other); end
  def equality?; end
  def fetch_attribute(&block); end
  def hash; end
  def initialize(values, attribute, type); end
  def invert; end
  def ivars; end
  def left; end
  def proc_for_binds; end
  def right; end
  def type; end
  def values; end
end
class Arel::Nodes::Ordering < Arel::Nodes::Unary
  def nulls_first; end
  def nulls_last; end
end
class Arel::Nodes::NullsFirst < Arel::Nodes::Ordering
  def reverse; end
end
class Arel::Nodes::NullsLast < Arel::Nodes::Ordering
  def reverse; end
end
class Arel::Nodes::Ascending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::Descending < Arel::Nodes::Ordering
  def ascending?; end
  def descending?; end
  def direction; end
  def reverse; end
end
class Arel::Nodes::UnqualifiedColumn < Arel::Nodes::Unary
  def attribute; end
  def attribute=(arg0); end
  def column; end
  def name; end
  def relation; end
end
class Arel::Nodes::With < Arel::Nodes::Unary
  def children; end
end
class Arel::Nodes::WithRecursive < Arel::Nodes::With
end
class Arel::Nodes::Binary < Arel::Nodes::NodeExpression
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(left, right); end
  def initialize_copy(other); end
  def left; end
  def left=(arg0); end
  def right; end
  def right=(arg0); end
end
module Arel::Nodes::FetchAttribute
  def fetch_attribute; end
end
class Arel::Nodes::As < Arel::Nodes::Binary
  def to_cte; end
end
class Arel::Nodes::Between < Arel::Nodes::Binary
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::GreaterThan < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::GreaterThanOrEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::LessThan < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::LessThanOrEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::IsDistinctFrom < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::IsNotDistinctFrom < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::NotEqual < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::NotIn < Arel::Nodes::Binary
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::Or < Arel::Nodes::Binary
  def fetch_attribute(&block); end
end
class Arel::Nodes::Assignment < Arel::Nodes::Binary
end
class Arel::Nodes::Join < Arel::Nodes::Binary
end
class Arel::Nodes::Union < Arel::Nodes::Binary
end
class Arel::Nodes::UnionAll < Arel::Nodes::Binary
end
class Arel::Nodes::Intersect < Arel::Nodes::Binary
end
class Arel::Nodes::Except < Arel::Nodes::Binary
end
class Arel::Nodes::Equality < Arel::Nodes::Binary
  def equality?; end
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::Filter < Arel::Nodes::Binary
  include Arel::AliasPredication
  include Arel::WindowPredications
end
class Arel::Nodes::In < Arel::Nodes::Binary
  def equality?; end
  def invert; end
  include Arel::Nodes::FetchAttribute
end
class Arel::Nodes::JoinSource < Arel::Nodes::Binary
  def empty?; end
  def initialize(single_source, joinop = nil); end
end
class Arel::Nodes::DeleteStatement < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def groups; end
  def groups=(arg0); end
  def hash; end
  def havings; end
  def havings=(arg0); end
  def initialize(relation = nil, wheres = nil); end
  def initialize_copy(other); end
  def key; end
  def key=(arg0); end
  def limit; end
  def limit=(arg0); end
  def offset; end
  def offset=(arg0); end
  def orders; end
  def orders=(arg0); end
  def relation; end
  def relation=(arg0); end
  def wheres; end
  def wheres=(arg0); end
end
class Arel::Nodes::TableAlias < Arel::Nodes::Binary
  def [](name); end
  def able_to_type_cast?; end
  def name; end
  def relation; end
  def table_alias; end
  def table_name; end
  def to_cte; end
  def type_cast_for_database(attr_name, value); end
  def type_for_attribute(name); end
end
class Arel::Nodes::InfixOperation < Arel::Nodes::Binary
  def initialize(operator, left, right); end
  def operator; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::Math
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::Multiplication < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Division < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Addition < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Subtraction < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Concat < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Contains < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::Overlaps < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseAnd < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseOr < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseXor < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftLeft < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::BitwiseShiftRight < Arel::Nodes::InfixOperation
  def initialize(left, right); end
end
class Arel::Nodes::UnaryOperation < Arel::Nodes::Unary
  def initialize(operator, operand); end
  def operator; end
end
class Arel::Nodes::BitwiseNot < Arel::Nodes::UnaryOperation
  def initialize(operand); end
end
class Arel::Nodes::Over < Arel::Nodes::Binary
  def initialize(left, right = nil); end
  def operator; end
  include Arel::AliasPredication
end
class Arel::Nodes::Matches < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def escape; end
  def initialize(left, right, escape = nil, case_sensitive = nil); end
end
class Arel::Nodes::DoesNotMatch < Arel::Nodes::Matches
end
class Arel::Nodes::Regexp < Arel::Nodes::Binary
  def case_sensitive; end
  def case_sensitive=(arg0); end
  def initialize(left, right, case_sensitive = nil); end
end
class Arel::Nodes::NotRegexp < Arel::Nodes::Regexp
end
class Arel::Nodes::Cte < Arel::Nodes::Binary
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name, relation, materialized: nil); end
  def materialized; end
  def name; end
  def relation; end
  def to_cte; end
  def to_table; end
end
class Arel::Nodes::And < Arel::Nodes::NodeExpression
  def ==(other); end
  def children; end
  def eql?(other); end
  def fetch_attribute(&block); end
  def hash; end
  def initialize(children); end
  def left; end
  def right; end
end
class Arel::Nodes::Function < Arel::Nodes::NodeExpression
  def ==(other); end
  def alias; end
  def alias=(arg0); end
  def as(aliaz); end
  def distinct; end
  def distinct=(arg0); end
  def eql?(other); end
  def expressions; end
  def expressions=(arg0); end
  def hash; end
  def initialize(expr, aliaz = nil); end
  include Arel::FilterPredications
  include Arel::WindowPredications
end
class Arel::Nodes::Sum < Arel::Nodes::Function
end
class Arel::Nodes::Exists < Arel::Nodes::Function
end
class Arel::Nodes::Max < Arel::Nodes::Function
end
class Arel::Nodes::Min < Arel::Nodes::Function
end
class Arel::Nodes::Avg < Arel::Nodes::Function
end
class Arel::Nodes::Count < Arel::Nodes::Function
  def initialize(expr, distinct = nil, aliaz = nil); end
end
class Arel::Nodes::Extract < Arel::Nodes::Unary
  def ==(other); end
  def eql?(other); end
  def field; end
  def field=(arg0); end
  def hash; end
  def initialize(expr, field); end
end
class Arel::Nodes::ValuesList < Arel::Nodes::Unary
  def rows; end
end
class Arel::Nodes::NamedFunction < Arel::Nodes::Function
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name, expr, aliaz = nil); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Window < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def frame(expr); end
  def framing; end
  def framing=(arg0); end
  def hash; end
  def initialize; end
  def initialize_copy(other); end
  def order(*expr); end
  def orders; end
  def orders=(arg0); end
  def partition(*expr); end
  def partitions; end
  def partitions=(arg0); end
  def range(expr = nil); end
  def rows(expr = nil); end
end
class Arel::Nodes::NamedWindow < Arel::Nodes::Window
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(name); end
  def initialize_copy(other); end
  def name; end
  def name=(arg0); end
end
class Arel::Nodes::Rows < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Range < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::CurrentRow < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
end
class Arel::Nodes::Preceding < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Following < Arel::Nodes::Unary
  def initialize(expr = nil); end
end
class Arel::Nodes::Case < Arel::Nodes::NodeExpression
  def ==(other); end
  def case; end
  def case=(arg0); end
  def conditions; end
  def conditions=(arg0); end
  def default; end
  def default=(arg0); end
  def else(expression); end
  def eql?(other); end
  def hash; end
  def initialize(expression = nil, default = nil); end
  def initialize_copy(other); end
  def then(expression); end
  def when(condition, expression = nil); end
end
class Arel::Nodes::When < Arel::Nodes::Binary
end
class Arel::Nodes::Else < Arel::Nodes::Unary
end
class Arel::Nodes::FullOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::InnerJoin < Arel::Nodes::Join
end
class Arel::Nodes::OuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::RightOuterJoin < Arel::Nodes::Join
end
class Arel::Nodes::StringJoin < Arel::Nodes::Join
  def initialize(left, right = nil); end
end
class Arel::Nodes::LeadingJoin < Arel::Nodes::InnerJoin
end
class Arel::Nodes::Comment < Arel::Nodes::Node
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(values); end
  def initialize_copy(other); end
  def values; end
end
class Arel::Nodes::SqlLiteral < String
  def +(other); end
  def encode_with(coder); end
  def fetch_attribute; end
  include Arel::AliasPredication
  include Arel::Expressions
  include Arel::OrderPredications
  include Arel::Predications
end
class Arel::Nodes::BoundSqlLiteral < Arel::Nodes::NodeExpression
  def +(other); end
  def ==(other); end
  def eql?(other); end
  def hash; end
  def initialize(sql_with_placeholders, positional_binds, named_binds); end
  def inspect; end
  def named_binds; end
  def positional_binds; end
  def sql_with_placeholders; end
end
class Arel::Nodes::Casted < Arel::Nodes::NodeExpression
  def ==(other); end
  def attribute; end
  def eql?(other); end
  def hash; end
  def initialize(value, attribute); end
  def nil?; end
  def value; end
  def value_before_type_cast; end
  def value_for_database; end
end
class Arel::Nodes::Quoted < Arel::Nodes::Unary
  def infinite?; end
  def nil?; end
  def value_before_type_cast; end
  def value_for_database; end
end
module ActiveRecord
  def self.action_on_strict_loading_violation; end
  def self.action_on_strict_loading_violation=(arg0); end
  def self.allow_deprecated_singular_associations_name; end
  def self.allow_deprecated_singular_associations_name=(arg0); end
  def self.application_record_class; end
  def self.application_record_class=(arg0); end
  def self.async_query_executor; end
  def self.async_query_executor=(arg0); end
  def self.before_committed_on_all_records; end
  def self.before_committed_on_all_records=(arg0); end
  def self.belongs_to_required_validates_foreign_key; end
  def self.belongs_to_required_validates_foreign_key=(arg0); end
  def self.commit_transaction_on_non_local_return; end
  def self.commit_transaction_on_non_local_return=(arg0); end
  def self.db_warnings_action; end
  def self.db_warnings_action=(action); end
  def self.db_warnings_ignore; end
  def self.db_warnings_ignore=(arg0); end
  def self.default_timezone; end
  def self.default_timezone=(default_timezone); end
  def self.deprecator; end
  def self.disable_prepared_statements; end
  def self.disable_prepared_statements=(arg0); end
  def self.disconnect_all!; end
  def self.dump_schema_after_migration; end
  def self.dump_schema_after_migration=(arg0); end
  def self.dump_schemas; end
  def self.dump_schemas=(arg0); end
  def self.eager_load!; end
  def self.error_on_ignored_order; end
  def self.error_on_ignored_order=(arg0); end
  def self.gem_version; end
  def self.generate_secure_token_on; end
  def self.generate_secure_token_on=(arg0); end
  def self.global_executor_concurrency; end
  def self.global_executor_concurrency=(global_executor_concurrency); end
  def self.global_thread_pool_async_query_executor; end
  def self.index_nested_attribute_errors; end
  def self.index_nested_attribute_errors=(arg0); end
  def self.lazily_load_schema_cache; end
  def self.lazily_load_schema_cache=(arg0); end
  def self.legacy_connection_handling=(_); end
  def self.maintain_test_schema; end
  def self.maintain_test_schema=(arg0); end
  def self.marshalling_format_version; end
  def self.marshalling_format_version=(value); end
  def self.migration_strategy; end
  def self.migration_strategy=(arg0); end
  def self.query_transformers; end
  def self.query_transformers=(arg0); end
  def self.queues; end
  def self.queues=(arg0); end
  def self.raise_int_wider_than_64bit; end
  def self.raise_int_wider_than_64bit=(arg0); end
  def self.raise_on_assign_to_attr_readonly; end
  def self.raise_on_assign_to_attr_readonly=(arg0); end
  def self.reading_role; end
  def self.reading_role=(arg0); end
  def self.run_after_transaction_callbacks_in_order_defined; end
  def self.run_after_transaction_callbacks_in_order_defined=(arg0); end
  def self.schema_cache_ignored_tables; end
  def self.schema_cache_ignored_tables=(arg0); end
  def self.schema_format; end
  def self.schema_format=(arg0); end
  def self.suppress_multiple_database_warning; end
  def self.suppress_multiple_database_warning=(value); end
  def self.timestamped_migrations; end
  def self.timestamped_migrations=(arg0); end
  def self.use_yaml_unsafe_load; end
  def self.use_yaml_unsafe_load=(arg0); end
  def self.verbose_query_logs; end
  def self.verbose_query_logs=(arg0); end
  def self.verify_foreign_keys_for_fixtures; end
  def self.verify_foreign_keys_for_fixtures=(arg0); end
  def self.version; end
  def self.warn_on_records_fetched_greater_than; end
  def self.warn_on_records_fetched_greater_than=(arg0); end
  def self.writing_role; end
  def self.writing_role=(arg0); end
  def self.yaml_column_permitted_classes; end
  def self.yaml_column_permitted_classes=(arg0); end
  extend ActiveSupport::Autoload
  include ActiveSupport::Deprecation::DeprecatedConstantAccessor
end
module ActiveRecord::VERSION
end
class ActiveRecord::ActiveRecordError < StandardError
end
class ActiveRecord::DeprecatedActiveJobRequiredError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SubclassNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AssociationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SerializationTypeMismatch < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TableNotSpecified < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AdapterError < ActiveRecord::ActiveRecordError
  def connection_pool; end
  def initialize(message = nil, connection_pool: nil); end
end
class ActiveRecord::ConnectionNotEstablished < ActiveRecord::AdapterError
  def initialize(message = nil, connection_pool: nil); end
  def set_pool(connection_pool); end
end
class ActiveRecord::ConnectionTimeoutError < ActiveRecord::ConnectionNotEstablished
end
class ActiveRecord::DatabaseConnectionError < ActiveRecord::ConnectionNotEstablished
  def initialize(message = nil); end
  def self.hostname_error(hostname); end
  def self.username_error(username); end
end
class ActiveRecord::ExclusiveConnectionTimeoutError < ActiveRecord::ConnectionTimeoutError
end
class ActiveRecord::ReadOnlyError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::RecordNotFound < ActiveRecord::ActiveRecordError
  def id; end
  def initialize(message = nil, model = nil, primary_key = nil, id = nil); end
  def model; end
  def primary_key; end
end
class ActiveRecord::RecordNotSaved < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::RecordNotDestroyed < ActiveRecord::ActiveRecordError
  def initialize(message = nil, record = nil); end
  def record; end
end
class ActiveRecord::SoleRecordExceeded < ActiveRecord::ActiveRecordError
  def initialize(record = nil); end
  def record; end
end
class ActiveRecord::StatementInvalid < ActiveRecord::AdapterError
  def binds; end
  def initialize(message = nil, sql: nil, binds: nil, connection_pool: nil); end
  def set_query(sql, binds); end
  def sql; end
end
class ActiveRecord::WrappedDatabaseException < ActiveRecord::StatementInvalid
end
class ActiveRecord::RecordNotUnique < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::InvalidForeignKey < ActiveRecord::WrappedDatabaseException
end
class ActiveRecord::MismatchedForeignKey < ActiveRecord::StatementInvalid
  def initialize(message: nil, sql: nil, binds: nil, table: nil, foreign_key: nil, target_table: nil, primary_key: nil, primary_key_column: nil, query_parser: nil, connection_pool: nil); end
  def set_query(sql, binds); end
end
class ActiveRecord::NotNullViolation < ActiveRecord::StatementInvalid
end
class ActiveRecord::ValueTooLong < ActiveRecord::StatementInvalid
end
class ActiveRecord::RangeError < ActiveRecord::StatementInvalid
end
class ActiveRecord::SQLWarning < ActiveRecord::AdapterError
  def code; end
  def initialize(message = nil, code = nil, level = nil, sql = nil, connection_pool = nil); end
  def level; end
  def sql; end
  def sql=(arg0); end
end
class ActiveRecord::PreparedStatementInvalid < ActiveRecord::ActiveRecordError
end
class ActiveRecord::NoDatabaseError < ActiveRecord::StatementInvalid
  def _actions; end
  def _actions=(arg0); end
  def _actions?; end
  def initialize(message = nil, connection_pool: nil); end
  def self._actions; end
  def self._actions=(value); end
  def self._actions?; end
  def self.db_error(db_name); end
  extend ActiveSupport::ActionableError::ClassMethods
  include ActiveSupport::ActionableError
end
class ActiveRecord::DatabaseAlreadyExists < ActiveRecord::StatementInvalid
end
class ActiveRecord::PreparedStatementCacheExpired < ActiveRecord::StatementInvalid
end
class ActiveRecord::StaleObjectError < ActiveRecord::ActiveRecordError
  def attempted_action; end
  def initialize(record = nil, attempted_action = nil); end
  def record; end
end
class ActiveRecord::ConfigurationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ReadOnlyRecord < ActiveRecord::ActiveRecordError
end
class ActiveRecord::StrictLoadingViolationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::Rollback < ActiveRecord::ActiveRecordError
end
class ActiveRecord::DangerousAttributeError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AttributeAssignmentError < ActiveRecord::ActiveRecordError
  def attribute; end
  def exception; end
  def initialize(message = nil, exception = nil, attribute = nil); end
end
class ActiveRecord::MultiparameterAssignmentErrors < ActiveRecord::ActiveRecordError
  def errors; end
  def initialize(errors = nil); end
end
class ActiveRecord::UnknownPrimaryKey < ActiveRecord::ActiveRecordError
  def initialize(model = nil, description = nil); end
  def model; end
end
class ActiveRecord::ImmutableRelation < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionIsolationError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::TransactionRollbackError < ActiveRecord::StatementInvalid
end
class ActiveRecord::AsynchronousQueryInsideTransactionError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::SerializationFailure < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::Deadlocked < ActiveRecord::TransactionRollbackError
end
class ActiveRecord::IrreversibleOrderError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::QueryAborted < ActiveRecord::StatementInvalid
end
class ActiveRecord::LockWaitTimeout < ActiveRecord::StatementInvalid
end
class ActiveRecord::StatementTimeout < ActiveRecord::QueryAborted
end
class ActiveRecord::QueryCanceled < ActiveRecord::QueryAborted
end
class ActiveRecord::AdapterTimeout < ActiveRecord::QueryAborted
end
class ActiveRecord::ConnectionFailed < ActiveRecord::QueryAborted
end
class ActiveRecord::UnknownAttributeReference < ActiveRecord::ActiveRecordError
end
module ActiveRecord::AttributeMethods
  def [](attr_name); end
  def []=(attr_name, value); end
  def _has_attribute?(attr_name); end
  def accessed_fields; end
  def attribute_for_inspect(attr_name); end
  def attribute_method?(attr_name); end
  def attribute_names; end
  def attribute_present?(attr_name); end
  def attributes; end
  def attributes_for_create(attribute_names); end
  def attributes_for_update(attribute_names); end
  def attributes_with_values(attribute_names); end
  def format_for_inspect(name, value); end
  def has_attribute?(attr_name); end
  def pk_attribute?(name); end
  def respond_to?(name, include_private = nil); end
  def self.dangerous_attribute_methods; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
  include ActiveModel::AttributeMethods
end
class ActiveRecord::AttributeMethods::GeneratedAttributeMethods < Module
  def lock; end
  def locked?; end
  def synchronize(&block); end
  def try_lock; end
  def unlock; end
  include Mutex_m
end
module ActiveRecord::AttributeMethods::ClassMethods
  def _has_attribute?(attr_name); end
  def alias_attribute(new_name, old_name); end
  def alias_attribute_method_definition(code_generator, pattern, new_name, old_name); end
  def attribute_method?(attribute); end
  def attribute_names; end
  def dangerous_attribute_method?(name); end
  def dangerous_class_method?(method_name); end
  def define_attribute_methods; end
  def eagerly_generate_alias_attribute_methods(_new_name, _old_name); end
  def generate_alias_attributes; end
  def has_attribute?(attr_name); end
  def inherited(child_class); end
  def initialize_generated_modules; end
  def instance_method_already_implemented?(method_name); end
  def method_defined_within?(name, klass, superklass = nil); end
  def undefine_attribute_methods; end
end
module ActiveRecord::Scoping
  def initialize_internals_callback; end
  def populate_with_current_scope_attributes; end
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::ClassMethods
  def current_scope(skip_inherited_scope = nil); end
  def current_scope=(scope); end
  def global_current_scope(skip_inherited_scope = nil); end
  def global_current_scope=(scope); end
  def scope_attributes; end
  def scope_attributes?; end
  def scope_registry; end
end
class ActiveRecord::Scoping::ScopeRegistry
  def current_scope(model, skip_inherited_scope = nil); end
  def global_current_scope(model, skip_inherited_scope = nil); end
  def ignore_default_scope(model, skip_inherited_scope = nil); end
  def initialize; end
  def self.current_scope(*, **, &); end
  def self.global_current_scope(*, **, &); end
  def self.ignore_default_scope(*, **, &); end
  def self.instance; end
  def self.set_current_scope(*, **, &); end
  def self.set_global_current_scope(*, **, &); end
  def self.set_ignore_default_scope(*, **, &); end
  def set_current_scope(model, value); end
  def set_global_current_scope(model, value); end
  def set_ignore_default_scope(model, value); end
  def set_value_for(scope_type, model, value); end
  def value_for(scope_type, model, skip_inherited_scope = nil); end
end
class ActiveRecord::PendingMigrationConnection
  def self.current_preventing_writes; end
  def self.establish_temporary_connection(db_config, &block); end
  def self.primary_class?; end
end
class ActiveRecord::MigrationError < ActiveRecord::ActiveRecordError
  def initialize(message = nil); end
end
class ActiveRecord::IrreversibleMigration < ActiveRecord::MigrationError
end
class ActiveRecord::DuplicateMigrationVersionError < ActiveRecord::MigrationError
  def initialize(version = nil); end
end
class ActiveRecord::DuplicateMigrationNameError < ActiveRecord::MigrationError
  def initialize(name = nil); end
end
class ActiveRecord::UnknownMigrationVersionError < ActiveRecord::MigrationError
  def initialize(version = nil); end
end
class ActiveRecord::IllegalMigrationNameError < ActiveRecord::MigrationError
  def initialize(name = nil); end
end
class ActiveRecord::PendingMigrationError < ActiveRecord::MigrationError
  def _actions; end
  def _actions=(arg0); end
  def _actions?; end
  def connection; end
  def detailed_migration_message(pending_migrations); end
  def initialize(message = nil, pending_migrations: nil); end
  def self._actions; end
  def self._actions=(value); end
  def self._actions?; end
  extend ActiveSupport::ActionableError::ClassMethods
  include ActiveSupport::ActionableError
end
class ActiveRecord::ConcurrentMigrationError < ActiveRecord::MigrationError
  def initialize(message = nil); end
end
class ActiveRecord::NoEnvironmentInSchemaError < ActiveRecord::MigrationError
  def initialize; end
end
class ActiveRecord::ProtectedEnvironmentError < ActiveRecord::ActiveRecordError
  def initialize(env = nil); end
end
class ActiveRecord::EnvironmentMismatchError < ActiveRecord::ActiveRecordError
  def initialize(current: nil, stored: nil); end
end
class ActiveRecord::EnvironmentStorageError < ActiveRecord::ActiveRecordError
  def initialize; end
end
class ActiveRecord::Migration
  def announce(message); end
  def command_recorder; end
  def connection; end
  def copy(destination, sources, options = nil); end
  def disable_ddl_transaction; end
  def down; end
  def exec_migration(conn, direction); end
  def execute_block; end
  def execution_strategy; end
  def format_arguments(arguments); end
  def initialize(name = nil, version = nil); end
  def internal_option?(option_name); end
  def method_missing(method, *arguments, **, &block); end
  def migrate(direction); end
  def name; end
  def name=(arg0); end
  def next_migration_number(number); end
  def proper_table_name(name, options = nil); end
  def reversible; end
  def revert(*migration_classes, &block); end
  def reverting?; end
  def run(*migration_classes); end
  def say(message, subitem = nil); end
  def say_with_time(message); end
  def self.[](version); end
  def self.any_schema_needs_update?; end
  def self.check_all_pending!; end
  def self.check_pending!(connection = nil); end
  def self.check_pending_migrations; end
  def self.current_version; end
  def self.db_configs_in_current_env; end
  def self.delegate; end
  def self.delegate=(arg0); end
  def self.disable_ddl_transaction!; end
  def self.disable_ddl_transaction; end
  def self.disable_ddl_transaction=(arg0); end
  def self.env; end
  def self.inherited(subclass); end
  def self.load_schema_if_pending!; end
  def self.maintain_test_schema!; end
  def self.method_missing(name, *args, **, &block); end
  def self.migrate(direction); end
  def self.nearest_delegate; end
  def self.pending_migrations; end
  def self.valid_version_format?(version_string); end
  def self.verbose; end
  def self.verbose=(val); end
  def suppress_messages; end
  def table_name_options(config = nil); end
  def up; end
  def up_only(&block); end
  def verbose; end
  def verbose=(val); end
  def version; end
  def version=(arg0); end
  def write(text = nil); end
end
class ActiveRecord::Migration::Current < ActiveRecord::Migration
  def change_table(table_name, **options); end
  def compatible_table_definition(t); end
  def create_join_table(table_1, table_2, **options); end
  def create_table(table_name, **options); end
  def drop_table(table_name, **options); end
end
class ActiveRecord::Migration::CheckPending
  def build_watcher(&block); end
  def call(env); end
  def connection; end
  def initialize(app, file_watcher: nil); end
end
class ActiveRecord::Migration::ReversibleBlockHelper < Struct
  def down; end
  def reverting; end
  def reverting=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def up; end
end
class ActiveRecord::MigrationProxy < Struct
  def announce(*, **, &); end
  def basename; end
  def disable_ddl_transaction(*, **, &); end
  def filename; end
  def filename=(_); end
  def initialize(name, version, filename, scope); end
  def load_migration; end
  def migrate(*, **, &); end
  def migration; end
  def name; end
  def name=(_); end
  def scope; end
  def scope=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def version; end
  def version=(_); end
  def write(*, **, &); end
end
class ActiveRecord::MigrationContext
  def connection; end
  def current_environment; end
  def current_version; end
  def down(target_version = nil, &block); end
  def forward(steps = nil); end
  def get_all_versions; end
  def initialize(migrations_paths, schema_migration = nil, internal_metadata = nil); end
  def internal_metadata; end
  def last_stored_environment; end
  def migrate(target_version = nil, &block); end
  def migration_files; end
  def migrations; end
  def migrations_paths; end
  def migrations_status; end
  def move(direction, steps); end
  def needs_migration?; end
  def open; end
  def parse_migration_filename(filename); end
  def pending_migration_versions; end
  def protected_environment?; end
  def rollback(steps = nil); end
  def run(direction, target_version); end
  def schema_migration; end
  def up(target_version = nil, &block); end
end
class ActiveRecord::Migrator
  def connection; end
  def current; end
  def current_migration; end
  def current_version; end
  def ddl_transaction(migration, &block); end
  def down?; end
  def execute_migration_in_transaction(migration); end
  def finish; end
  def generate_migrator_advisory_lock_id; end
  def initialize(direction, migrations, schema_migration, internal_metadata, target_version = nil); end
  def invalid_target?; end
  def load_migrated; end
  def migrate; end
  def migrate_without_lock; end
  def migrated; end
  def migrations; end
  def pending_migrations; end
  def ran?(migration); end
  def record_environment; end
  def record_version_state_after_migrating(version); end
  def run; end
  def run_without_lock; end
  def runnable; end
  def self.current_version; end
  def self.migrations_paths; end
  def self.migrations_paths=(arg0); end
  def start; end
  def target; end
  def up?; end
  def use_advisory_lock?; end
  def use_transaction?(migration); end
  def validate(migrations); end
  def with_advisory_lock; end
end
class ActiveRecord::Migration::ExecutionStrategy
  def initialize(migration); end
  def migration; end
end
class ActiveRecord::Migration::DefaultStrategy < ActiveRecord::Migration::ExecutionStrategy
  def connection; end
  def method_missing(method, *arguments, **, &block); end
  def respond_to_missing?(method, *arg1); end
end
module ActiveRecord::Coders
end
module ActiveRecord::Locking
  extend ActiveSupport::Autoload
end
module ActiveRecord::Middleware
  extend ActiveSupport::Autoload
end
module ActiveRecord::Tasks
  extend ActiveSupport::Autoload
end
class ActiveRecord::Railtie < Rails::Railtie
end
module ActiveRecord::Reflection
  def self.add_aggregate_reflection(ar, name, reflection); end
  def self.add_reflection(ar, name, reflection); end
  def self.create(macro, name, scope, options, ar); end
  def self.reflection_class_for(macro); end
  extend ActiveSupport::Concern
end
module ActiveRecord::Reflection::ClassMethods
  def _reflect_on_association(association); end
  def clear_reflections_cache; end
  def inherited(subclass); end
  def reflect_on_aggregation(aggregation); end
  def reflect_on_all_aggregations; end
  def reflect_on_all_associations(macro = nil); end
  def reflect_on_all_autosave_associations; end
  def reflect_on_association(association); end
  def reflections; end
end
class ActiveRecord::Reflection::AbstractReflection
  def actual_source_reflection; end
  def alias_candidate(name); end
  def build_association(attributes, &block); end
  def build_scope(table, predicate_builder = nil, klass = nil); end
  def chain; end
  def check_validity_of_inverse!; end
  def class_name; end
  def constraints; end
  def counter_cache_column; end
  def counter_must_be_updated_by_has_many?; end
  def ensure_option_not_given_as_class!(option_name); end
  def has_cached_counter?; end
  def initialize; end
  def inverse_of; end
  def inverse_updates_counter_cache?; end
  def inverse_updates_counter_in_memory?; end
  def inverse_which_updates_counter_cache; end
  def join_scope(table, foreign_table, foreign_klass); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def klass_join_scope(table, predicate_builder); end
  def predicate_builder(table); end
  def primary_key(klass); end
  def scopes; end
  def strict_loading?; end
  def strict_loading_violation_message(owner); end
  def table_name; end
  def through_reflection?; end
end
class ActiveRecord::Reflection::MacroReflection < ActiveRecord::Reflection::AbstractReflection
  def ==(other_aggregation); end
  def active_record; end
  def autosave=(autosave); end
  def compute_class(name); end
  def derive_class_name; end
  def initialize(name, scope, options, active_record); end
  def klass; end
  def name; end
  def options; end
  def plural_name; end
  def scope; end
  def scope_for(relation, owner = nil); end
  def validate_reflection!; end
end
class ActiveRecord::Reflection::AggregateReflection < ActiveRecord::Reflection::MacroReflection
  def mapping; end
end
class ActiveRecord::Reflection::AssociationReflection < ActiveRecord::Reflection::MacroReflection
  def active_record_primary_key; end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class; end
  def association_foreign_key; end
  def association_primary_key(klass = nil); end
  def association_scope_cache(klass, owner, &block); end
  def automatic_inverse_of; end
  def belongs_to?; end
  def can_find_inverse_of_automatically?(reflection, inverse_reflection = nil); end
  def check_eager_loadable!; end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collection?; end
  def compute_class(name); end
  def derive_class_name; end
  def derive_fk_query_constraints(foreign_key); end
  def derive_foreign_key(infer_from_inverse_of: nil); end
  def derive_join_table; end
  def extensions; end
  def foreign_key(infer_from_inverse_of: nil); end
  def foreign_type; end
  def has_inverse?; end
  def has_one?; end
  def has_scope?; end
  def initialize(name, scope, options, active_record); end
  def inverse_name; end
  def join_foreign_key; end
  def join_id_for(owner); end
  def join_primary_key(klass = nil); end
  def join_primary_type; end
  def join_table; end
  def macro; end
  def nested?; end
  def parent_reflection; end
  def parent_reflection=(arg0); end
  def polymorphic?; end
  def polymorphic_inverse_of(associated_class); end
  def polymorphic_name; end
  def scope_allows_automatic_inverse_of?(reflection, inverse_reflection); end
  def source_reflection; end
  def through_reflection; end
  def type; end
  def valid_inverse_reflection?(reflection); end
  def validate?; end
end
class ActiveRecord::Reflection::HasManyReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def collection?; end
  def macro; end
end
class ActiveRecord::Reflection::HasOneReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def has_one?; end
  def macro; end
end
class ActiveRecord::Reflection::BelongsToReflection < ActiveRecord::Reflection::AssociationReflection
  def association_class; end
  def association_primary_key(klass = nil); end
  def belongs_to?; end
  def can_find_inverse_of_automatically?(*arg0); end
  def join_foreign_key; end
  def join_foreign_type; end
  def join_primary_key(klass = nil); end
  def macro; end
end
class ActiveRecord::Reflection::HasAndBelongsToManyReflection < ActiveRecord::Reflection::AssociationReflection
  def collection?; end
  def macro; end
end
class ActiveRecord::Reflection::ThroughReflection < ActiveRecord::Reflection::AbstractReflection
  def active_record(*, **, &); end
  def active_record_primary_key(*, **, &); end
  def actual_source_reflection; end
  def add_as_polymorphic_through(reflection, seed); end
  def add_as_source(seed); end
  def add_as_through(seed); end
  def association_class(*, **, &); end
  def association_foreign_key(*, **, &); end
  def association_primary_key(klass = nil); end
  def association_scope_cache(*, **, &); end
  def autosave=(arg); end
  def belongs_to?(*, **, &); end
  def check_eager_loadable!(*, **, &); end
  def check_validity!; end
  def clear_association_scope_cache; end
  def collect_join_chain; end
  def collect_join_reflections(seed); end
  def collection?(*, **, &); end
  def compute_class(*, **, &); end
  def constraints; end
  def delegate_reflection; end
  def derive_class_name; end
  def extensions(*, **, &); end
  def foreign_key(*, **, &); end
  def foreign_type(*, **, &); end
  def has_inverse?(*, **, &); end
  def has_one?(*, **, &); end
  def has_scope?; end
  def initialize(delegate_reflection); end
  def inverse_name; end
  def join_foreign_key(*, **, &); end
  def join_id_for(*, **, &); end
  def join_primary_key(klass = nil); end
  def join_primary_type(*, **, &); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def join_table(*, **, &); end
  def klass; end
  def macro(*, **, &); end
  def name(*, **, &); end
  def nested?; end
  def options(*, **, &); end
  def parent_reflection(*, **, &); end
  def parent_reflection=(arg); end
  def plural_name(*, **, &); end
  def polymorphic?(*, **, &); end
  def polymorphic_inverse_of(*, **, &); end
  def polymorphic_name(*, **, &); end
  def scope(*, **, &); end
  def scope_for(*, **, &); end
  def scopes; end
  def source_options; end
  def source_reflection; end
  def source_reflection_name; end
  def source_reflection_names; end
  def through_options; end
  def through_reflection; end
  def through_reflection?; end
  def type(*, **, &); end
  def validate?(*, **, &); end
end
class ActiveRecord::Reflection::PolymorphicReflection < ActiveRecord::Reflection::AbstractReflection
  def constraints; end
  def initialize(reflection, previous_reflection); end
  def join_foreign_key(*, **, &); end
  def join_primary_key(*, **, &); end
  def join_scopes(table, predicate_builder, klass = nil, record = nil); end
  def klass(*, **, &); end
  def name(*, **, &); end
  def plural_name(*, **, &); end
  def scope(*, **, &); end
  def scope_for(*, **, &); end
  def source_type_scope; end
  def type(*, **, &); end
end
class ActiveRecord::Reflection::RuntimeReflection < ActiveRecord::Reflection::AbstractReflection
  def aliased_table; end
  def all_includes; end
  def constraints(*, **, &); end
  def initialize(reflection, association); end
  def join_foreign_key(*, **, &); end
  def join_primary_key(klass = nil); end
  def klass; end
  def scope(*, **, &); end
  def type(*, **, &); end
end
module ActiveRecord::ConnectionAdapters
  extend ActiveSupport::Autoload
end
module ActiveRecord::ConnectionAdapters::Deduplicable
  def -@; end
  def deduplicate; end
  def deduplicated; end
  extend ActiveSupport::Concern
end
module ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  def new(*arg0, **arg1); end
  def registry; end
end
class ActiveRecord::ConnectionAdapters::SqlTypeMetadata
  def ==(other); end
  def deduplicated; end
  def eql?(other); end
  def hash; end
  def initialize(sql_type: nil, type: nil, limit: nil, precision: nil, scale: nil); end
  def limit; end
  def precision; end
  def scale; end
  def sql_type; end
  def type; end
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::SchemaDumper
  def check_constraints_in_create(table, stream); end
  def chk_ignore_pattern; end
  def chk_ignore_pattern=(val); end
  def define_params; end
  def dump(stream); end
  def excl_ignore_pattern; end
  def excl_ignore_pattern=(val); end
  def extensions(stream); end
  def fk_ignore_pattern; end
  def fk_ignore_pattern=(val); end
  def foreign_keys(table, stream); end
  def format_colspec(colspec); end
  def format_index_parts(options); end
  def format_options(options); end
  def formatted_version; end
  def header(stream); end
  def ignore_tables; end
  def ignore_tables=(val); end
  def ignored?(table_name); end
  def index_parts(index); end
  def indexes(table, stream); end
  def indexes_in_create(table, stream); end
  def initialize(connection, options = nil); end
  def remove_prefix_and_suffix(table); end
  def schemas(stream); end
  def self.chk_ignore_pattern; end
  def self.chk_ignore_pattern=(val); end
  def self.dump(connection = nil, stream = nil, config = nil); end
  def self.excl_ignore_pattern; end
  def self.excl_ignore_pattern=(val); end
  def self.fk_ignore_pattern; end
  def self.fk_ignore_pattern=(val); end
  def self.generate_options(config); end
  def self.ignore_tables; end
  def self.ignore_tables=(val); end
  def self.new(*arg0, **); end
  def self.unique_ignore_pattern; end
  def self.unique_ignore_pattern=(val); end
  def table(table, stream); end
  def table_name; end
  def table_name=(arg0); end
  def tables(stream); end
  def trailer(stream); end
  def types(stream); end
  def unique_ignore_pattern; end
  def unique_ignore_pattern=(val); end
end
class ActiveRecord::ConnectionAdapters::SchemaDumper < ActiveRecord::SchemaDumper
  def column_spec(column); end
  def column_spec_for_primary_key(column); end
  def default_primary_key?(column); end
  def explicit_primary_key_default?(column); end
  def prepare_column_options(column); end
  def schema_collation(column); end
  def schema_default(column); end
  def schema_expression(column); end
  def schema_limit(column); end
  def schema_precision(column); end
  def schema_scale(column); end
  def schema_type(column); end
  def schema_type_with_virtual(column); end
  def self.create(connection, options); end
end
class ActiveRecord::ConnectionAdapters::SchemaCreation
  def accept(o); end
  def action_sql(action, dependency); end
  def add_column_options!(sql, options); end
  def add_table_options!(create_sql, o); end
  def column_options(o); end
  def initialize(conn); end
  def options_include_default?(*, **, &); end
  def quote_column_name(*, **, &); end
  def quote_default_expression(*, **, &); end
  def quote_table_name(*, **, &); end
  def quoted_columns(o); end
  def quoted_columns_for_index(*, **, &); end
  def supports_check_constraints?(*, **, &); end
  def supports_exclusion_constraints?(*, **, &); end
  def supports_index_include?(*, **, &); end
  def supports_index_using?; end
  def supports_indexes_in_create?(*, **, &); end
  def supports_nulls_not_distinct?(*, **, &); end
  def supports_partial_index?(*, **, &); end
  def supports_unique_constraints?(*, **, &); end
  def table_modifier_in_create(o); end
  def to_sql(sql); end
  def type_to_sql(*, **, &); end
  def use_foreign_keys?(*, **, &); end
  def visit_AddCheckConstraint(o); end
  def visit_AddColumnDefinition(o); end
  def visit_AddForeignKey(o); end
  def visit_AlterTable(o); end
  def visit_CheckConstraintDefinition(o); end
  def visit_ColumnDefinition(o); end
  def visit_CreateIndexDefinition(o); end
  def visit_DropCheckConstraint(name); end
  def visit_DropForeignKey(name); end
  def visit_ForeignKeyDefinition(o); end
  def visit_PrimaryKeyDefinition(o); end
  def visit_TableDefinition(o); end
end
class Arel::Collectors::Bind
  def <<(str); end
  def add_bind(bind); end
  def add_binds(binds, proc_for_binds = nil); end
  def initialize; end
  def value; end
end
class Arel::Collectors::Composite
  def <<(str); end
  def add_bind(bind, &block); end
  def add_binds(binds, proc_for_binds = nil, &block); end
  def initialize(left, right); end
  def left; end
  def preparable; end
  def preparable=(arg0); end
  def right; end
  def value; end
end
class Arel::Collectors::SubstituteBinds
  def <<(str); end
  def add_bind(bind); end
  def add_binds(binds, proc_for_binds = nil); end
  def delegate; end
  def initialize(quoter, delegate_collector); end
  def preparable; end
  def preparable=(arg0); end
  def quoter; end
  def value; end
end
module ActiveRecord::ConnectionAdapters::Quoting
  def cast_bound_value(value); end
  def column_name_matcher; end
  def column_name_with_order_matcher; end
  def lookup_cast_type(sql_type); end
  def lookup_cast_type_from_column(column); end
  def quote(value); end
  def quote_bound_value(value); end
  def quote_column_name(column_name); end
  def quote_default_expression(value, column); end
  def quote_string(s); end
  def quote_table_name(table_name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_binary(value); end
  def quoted_date(value); end
  def quoted_false; end
  def quoted_time(value); end
  def quoted_true; end
  def sanitize_as_sql_comment(value); end
  def type_cast(value); end
  def type_casted_binds(binds); end
  def unquoted_false; end
  def unquoted_true; end
  def warn_quote_duration_deprecated; end
end
module ActiveRecord::ConnectionAdapters::DatabaseStatements
  def add_transaction_record(record, ensure_finalize = nil); end
  def arel_from_relation(relation); end
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def begin_transaction(*, **, &); end
  def build_fixture_sql(fixtures, table_name); end
  def build_fixture_statements(fixture_set); end
  def build_truncate_statement(table_name); end
  def build_truncate_statements(table_names); end
  def cacheable_query(klass, arel); end
  def combine_multi_statements(total_sql); end
  def commit_db_transaction; end
  def commit_transaction(*, **, &); end
  def create(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = nil, returning: nil); end
  def current_transaction(*, **, &); end
  def default_insert_value(column); end
  def default_sequence_name(table, column); end
  def delete(arel, name = nil, binds = nil); end
  def dirty_current_transaction(*, **, &); end
  def disable_lazy_transactions!(*, **, &); end
  def empty_insert_statement_value(primary_key = nil); end
  def enable_lazy_transactions!(*, **, &); end
  def exec_delete(sql, name = nil, binds = nil); end
  def exec_insert(sql, name = nil, binds = nil, pk = nil, sequence_name = nil, returning: nil); end
  def exec_insert_all(sql, name); end
  def exec_query(sql, name = nil, binds = nil, prepare: nil); end
  def exec_restart_db_transaction; end
  def exec_rollback_db_transaction; end
  def exec_update(sql, name = nil, binds = nil); end
  def execute(sql, name = nil, allow_retry: nil); end
  def execute_batch(statements, name = nil); end
  def explain(arel, binds = nil, options = nil); end
  def extract_table_ref_from_insert_sql(sql); end
  def high_precision_current_timestamp; end
  def initialize; end
  def insert(arel, name = nil, pk = nil, id_value = nil, sequence_name = nil, binds = nil, returning: nil); end
  def insert_fixture(fixture, table_name); end
  def insert_fixtures_set(fixture_set, tables_to_delete = nil); end
  def internal_exec_query(sql, name = nil, binds = nil, prepare: nil, async: nil); end
  def internal_execute(sql, name = nil, allow_retry: nil, materialize_transactions: nil); end
  def last_inserted_id(result); end
  def mark_transaction_written_if_write(sql); end
  def materialize_transactions(*, **, &); end
  def open_transactions(*, **, &); end
  def query(sql, name = nil); end
  def query_value(sql, name = nil); end
  def query_values(sql, name = nil); end
  def raw_execute(sql, name, async: nil, allow_retry: nil, materialize_transactions: nil); end
  def reset_sequence!(table, column, sequence = nil); end
  def reset_transaction(restore: nil); end
  def restart_db_transaction; end
  def returning_column_values(result); end
  def rollback_db_transaction; end
  def rollback_to_savepoint(name = nil); end
  def rollback_transaction(*, **, &); end
  def sanitize_limit(limit); end
  def select(sql, name = nil, binds = nil, prepare: nil, async: nil); end
  def select_all(arel, name = nil, binds = nil, preparable: nil, async: nil); end
  def select_one(arel, name = nil, binds = nil, async: nil); end
  def select_rows(arel, name = nil, binds = nil, async: nil); end
  def select_value(arel, name = nil, binds = nil, async: nil); end
  def select_values(arel, name = nil, binds = nil); end
  def single_value_from_rows(rows); end
  def sql_for_insert(sql, pk, binds, returning); end
  def to_sql(arel_or_sql_string, binds = nil); end
  def to_sql_and_binds(arel_or_sql_string, binds = nil, preparable = nil); end
  def transaction(requires_new: nil, isolation: nil, joinable: nil, &block); end
  def transaction_isolation_levels; end
  def transaction_manager; end
  def transaction_open?; end
  def truncate(table_name, name = nil); end
  def truncate_tables(*table_names); end
  def update(arel, name = nil, binds = nil); end
  def with_multi_statements; end
  def with_yaml_fallback(value); end
  def within_new_transaction(*, **, &); end
  def write_query?(sql); end
end
module ActiveRecord::Migration::JoinTable
  def find_join_table_name(table_1, table_2, options = nil); end
  def join_table_name(table_1, table_2); end
end
module ActiveRecord::ConnectionAdapters::SchemaStatements
  def add_belongs_to(table_name, ref_name, **options); end
  def add_check_constraint(table_name, expression, if_not_exists: nil, **options); end
  def add_column(table_name, column_name, type, **options); end
  def add_column_for_alter(table_name, column_name, type, **options); end
  def add_columns(table_name, *column_names, type:, **options); end
  def add_foreign_key(from_table, to_table, **options); end
  def add_index(table_name, column_name, **options); end
  def add_index_options(table_name, column_name, name: nil, if_not_exists: nil, internal: nil, **options); end
  def add_index_sort_order(quoted_columns, **options); end
  def add_options_for_index_columns(quoted_columns, **options); end
  def add_reference(table_name, ref_name, **options); end
  def add_timestamps(table_name, **options); end
  def add_timestamps_for_alter(table_name, **options); end
  def assume_migrated_upto_version(version); end
  def build_add_column_definition(table_name, column_name, type, **options); end
  def build_change_column_default_definition(table_name, column_name, default_or_changes); end
  def build_create_index_definition(table_name, column_name, **options); end
  def build_create_join_table_definition(table_1, table_2, column_options: nil, **options); end
  def build_create_table_definition(table_name, id: nil, primary_key: nil, force: nil, **options); end
  def bulk_change_table(table_name, operations); end
  def can_remove_index_by_name?(column_name, options); end
  def change_column(table_name, column_name, type, **options); end
  def change_column_comment(table_name, column_name, comment_or_changes); end
  def change_column_default(table_name, column_name, default_or_changes); end
  def change_column_default_for_alter(table_name, column_name, default_or_changes); end
  def change_column_null(table_name, column_name, null, default = nil); end
  def change_table(table_name, base = nil, **options); end
  def change_table_comment(table_name, comment_or_changes); end
  def check_constraint_exists?(table_name, **options); end
  def check_constraint_for!(table_name, expression: nil, **options); end
  def check_constraint_for(table_name, **options); end
  def check_constraint_name(table_name, **options); end
  def check_constraint_options(table_name, expression, options); end
  def check_constraints(table_name); end
  def column_exists?(table_name, column_name, type = nil, **options); end
  def column_options_keys; end
  def columns(table_name); end
  def columns_for_distinct(columns, orders); end
  def create_alter_table(name); end
  def create_join_table(table_1, table_2, column_options: nil, **options); end
  def create_schema_dumper(options); end
  def create_table(table_name, id: nil, primary_key: nil, force: nil, **options, &block); end
  def create_table_definition(name, **options); end
  def data_source_exists?(name); end
  def data_source_sql(name = nil, type: nil); end
  def data_sources; end
  def distinct_relation_for_primary_key(relation); end
  def drop_join_table(table_1, table_2, **options); end
  def drop_table(table_name, **options); end
  def dump_schema_information; end
  def expression_column_name?(column_name); end
  def extract_foreign_key_action(specifier); end
  def extract_new_comment_value(default_or_changes); end
  def extract_new_default_value(default_or_changes); end
  def fetch_type_metadata(sql_type); end
  def foreign_key_column_for(table_name, column_name); end
  def foreign_key_exists?(from_table, to_table = nil, **options); end
  def foreign_key_for!(from_table, to_table: nil, **options); end
  def foreign_key_for(from_table, **options); end
  def foreign_key_name(table_name, options); end
  def foreign_key_options(from_table, to_table, options); end
  def foreign_keys(table_name); end
  def foreign_keys_enabled?; end
  def generate_index_name(table_name, column); end
  def index_algorithm(algorithm); end
  def index_column_names(column_names); end
  def index_exists?(table_name, column_name, **options); end
  def index_name(table_name, options); end
  def index_name_exists?(table_name, index_name); end
  def index_name_for_remove(table_name, column_name, options); end
  def index_name_options(column_names); end
  def indexes(table_name); end
  def insert_versions_sql(versions); end
  def internal_string_options_for_primary_key; end
  def max_index_name_size; end
  def native_database_types; end
  def options_for_index_columns(options); end
  def options_include_default?(options); end
  def primary_key(table_name); end
  def quoted_columns_for_index(column_names, options); end
  def quoted_scope(name = nil, type: nil); end
  def reference_name_for_table(table_name); end
  def remove_belongs_to(table_name, ref_name, foreign_key: nil, polymorphic: nil, **options); end
  def remove_check_constraint(table_name, expression = nil, if_exists: nil, **options); end
  def remove_column(table_name, column_name, type = nil, **options); end
  def remove_column_for_alter(table_name, column_name, type = nil, **options); end
  def remove_columns(table_name, *column_names, type: nil, **options); end
  def remove_columns_for_alter(table_name, *column_names, **options); end
  def remove_foreign_key(from_table, to_table = nil, **options); end
  def remove_index(table_name, column_name = nil, **options); end
  def remove_reference(table_name, ref_name, foreign_key: nil, polymorphic: nil, **options); end
  def remove_timestamps(table_name, **options); end
  def remove_timestamps_for_alter(table_name, **options); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_column_indexes(table_name, column_name, new_column_name); end
  def rename_column_sql(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name, **arg2); end
  def rename_table_indexes(table_name, new_name); end
  def schema_creation; end
  def strip_table_name_prefix_and_suffix(table_name); end
  def table_alias_for(table_name); end
  def table_comment(table_name); end
  def table_exists?(table_name); end
  def table_options(table_name); end
  def tables; end
  def type_to_sql(type, limit: nil, precision: nil, scale: nil, **arg4); end
  def update_table_definition(table_name, base); end
  def use_foreign_keys?; end
  def valid_column_definition_options; end
  def valid_primary_key_options; end
  def valid_table_definition_options; end
  def validate_change_column_null_argument!(value); end
  def validate_create_table_options!(options); end
  def validate_index_length!(table_name, new_name, internal = nil); end
  def validate_table_length!(table_name); end
  def view_exists?(view_name); end
  def views; end
  include ActiveRecord::Migration::JoinTable
end
module ActiveRecord::ConnectionAdapters::DatabaseLimits
  def bind_params_length; end
  def index_name_length; end
  def max_identifier_length; end
  def table_alias_length; end
  def table_name_length; end
end
module ActiveRecord::ConnectionAdapters::QueryCache
  def cache; end
  def cache_notification_info(sql, name, binds); end
  def cache_sql(sql, name, binds); end
  def clear_query_cache; end
  def configure_query_cache!; end
  def disable_query_cache!; end
  def enable_query_cache!; end
  def initialize(*arg0); end
  def lookup_sql_cache(sql, name, binds); end
  def query_cache; end
  def query_cache_enabled; end
  def select_all(arel, name = nil, binds = nil, preparable: nil, async: nil); end
  def self.dirties_query_cache(base, *method_names); end
  def self.included(base); end
  def uncached; end
end
module ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  def disable_query_cache!; end
  def enable_query_cache!; end
  def initialize(*arg0); end
  def query_cache_enabled; end
end
module ActiveRecord::ConnectionAdapters::Savepoints
  def create_savepoint(name = nil); end
  def current_savepoint_name; end
  def exec_rollback_to_savepoint(name = nil); end
  def release_savepoint(name = nil); end
end
module ActiveRecord::Type
  def self.adapter_name_from(model); end
  def self.add_modifier(*, **, &); end
  def self.current_adapter_name; end
  def self.default_value; end
  def self.lookup(*args, adapter: nil, **kwargs); end
  def self.register(type_name, klass = nil, **options, &block); end
  def self.registry; end
  def self.registry=(arg0); end
end
module ActiveRecord::Type::Internal
end
module ActiveRecord::Type::Internal::Timezone
  def default_timezone; end
  def initialize(timezone: nil, **kwargs); end
  def is_utc?; end
end
class ActiveRecord::Type::Date < ActiveModel::Type::Date
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::DateTime < ActiveModel::Type::DateTime
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::DecimalWithoutScale < ActiveModel::Type::BigInteger
  def type; end
  def type_cast_for_schema(value); end
end
class ActiveRecord::Type::Json < ActiveModel::Type::Value
  def accessor; end
  def changed_in_place?(raw_old_value, new_value); end
  def deserialize(value); end
  def serialize(value); end
  def type; end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::Type::Time < ActiveModel::Type::Time
  def cast_value(value); end
  def serialize(value); end
  def serialize_cast_value(value); end
  include ActiveRecord::Type::Internal::Timezone
end
class ActiveRecord::Type::Time::Value < Anonymous_Delegator_24
end
class ActiveRecord::Type::Text < ActiveModel::Type::String
  def type; end
end
class ActiveRecord::Type::UnsignedInteger < ActiveModel::Type::Integer
  def max_value; end
  def min_value; end
end
class ActiveRecord::Type::Serialized < Anonymous_Delegator_25
  def accessor; end
  def assert_valid_value(value); end
  def changed_in_place?(raw_old_value, value); end
  def coder; end
  def default_value?(value); end
  def deserialize(value); end
  def encoded(value); end
  def force_equality?(value); end
  def initialize(subtype, coder); end
  def inspect; end
  def serialize(value); end
  def serialized?; end
  def subtype; end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::Type::AdapterSpecificRegistry
  def add_modifier(options, klass, **args); end
  def find_registration(symbol, *args, **kwargs); end
  def initialize; end
  def initialize_copy(other); end
  def lookup(symbol, *args, **kwargs); end
  def register(type_name, klass = nil, **options, &block); end
  def registrations; end
end
class ActiveRecord::Type::Registration
  def <=>(other); end
  def adapter; end
  def block; end
  def call(_registry, *args, adapter: nil, **kwargs); end
  def conflicts_with?(other); end
  def has_adapter_conflict?(other); end
  def initialize(name, block, adapter: nil, override: nil); end
  def matches?(type_name, *args, **kwargs); end
  def matches_adapter?(adapter: nil, **arg1); end
  def name; end
  def override; end
  def priority; end
  def priority_except_adapter; end
  def same_priority_except_adapter?(other); end
end
class ActiveRecord::Type::DecorationRegistration < ActiveRecord::Type::Registration
  def call(registry, *args, **kwargs); end
  def initialize(options, klass, adapter: nil); end
  def klass; end
  def matches?(*args, **kwargs); end
  def matches_options?(**kwargs); end
  def options; end
  def priority; end
end
class ActiveRecord::TypeConflictError < StandardError
end
class ActiveRecord::Type::TypeMap
  def alias_type(key, target_key); end
  def fetch(lookup_key, &block); end
  def initialize(parent = nil); end
  def lookup(lookup_key); end
  def perform_fetch(lookup_key, &block); end
  def register_type(key, value = nil, &block); end
end
class ActiveRecord::Type::HashLookupTypeMap
  def alias_type(type, alias_type); end
  def clear; end
  def fetch(lookup_key, *args, &block); end
  def initialize(parent = nil); end
  def key?(key); end
  def keys; end
  def lookup(lookup_key, *args); end
  def perform_fetch(type, *args, &block); end
  def register_type(key, value = nil, &block); end
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter
  def __callbacks; end
  def __callbacks?; end
  def _checkin_callbacks; end
  def _checkout_callbacks; end
  def _run_checkin_callbacks(&block); end
  def _run_checkout_callbacks(&block); end
  def active?; end
  def adapter_name; end
  def add_enum_value(*arg0); end
  def advisory_locks_enabled?; end
  def all_foreign_keys_valid?(*args, **, &block); end
  def any_raw_connection; end
  def arel_visitor; end
  def async_enabled?; end
  def backoff(counter); end
  def build_insert_sql(insert); end
  def build_result(columns:, rows:, column_types: nil); end
  def build_statement_pool; end
  def can_perform_case_insensitive_comparison_for?(column); end
  def case_insensitive_comparison(attribute, value); end
  def case_sensitive_comparison(attribute, value); end
  def check_all_foreign_keys_valid!; end
  def check_if_write_query(sql); end
  def check_version; end
  def clean!; end
  def clear_cache!(new_connection: nil); end
  def close; end
  def collector; end
  def column_for(table_name, column_name); end
  def column_for_attribute(attribute); end
  def configure_connection; end
  def connect!; end
  def connection_class; end
  def connection_retries; end
  def create(*, **, &); end
  def create_enum(*arg0); end
  def database_exists?; end
  def database_version; end
  def default_index_type?(index); end
  def default_prepared_statements; end
  def default_timezone; end
  def default_uniqueness_comparison(attribute, value); end
  def delete(*, **, &); end
  def disable_extension(name, **arg1); end
  def disable_referential_integrity; end
  def discard!; end
  def disconnect!; end
  def drop_enum(*arg0); end
  def enable_extension(name, **arg1); end
  def exec_insert_all(*, **, &); end
  def exec_query(*, **, &); end
  def execute(*, **, &); end
  def expire; end
  def extended_type_map_key; end
  def extensions; end
  def get_advisory_lock(lock_id); end
  def get_database_version; end
  def in_use?; end
  def index_algorithms; end
  def initialize(config_or_deprecated_connection, deprecated_logger = nil, deprecated_connection_options = nil, deprecated_config = nil); end
  def insert(*, **, &); end
  def internal_metadata; end
  def invalidate_transaction(exception); end
  def lease; end
  def lock; end
  def lock_thread=(lock_thread); end
  def log(sql, name = nil, binds = nil, type_casted_binds = nil, statement_name = nil, async: nil, &block); end
  def logger; end
  def migration_context; end
  def migrations_paths; end
  def owner; end
  def pool; end
  def pool=(value); end
  def prefetch_primary_key?(table_name = nil); end
  def prepared_statements; end
  def prepared_statements?; end
  def prepared_statements_disabled_cache; end
  def preventing_writes?; end
  def raw_connection; end
  def reconnect!(restore_transactions: nil); end
  def reconnect; end
  def reconnect_can_restore_state?; end
  def release_advisory_lock(lock_id); end
  def rename_enum(*arg0); end
  def rename_enum_value(*arg0); end
  def replica?; end
  def requires_reloading?; end
  def reset!; end
  def restart_db_transaction(*, **, &); end
  def retry_deadline; end
  def retryable_connection_error?(exception); end
  def retryable_query_error?(exception); end
  def return_value_after_insert?(column); end
  def role; end
  def rollback_db_transaction(*, **, &); end
  def rollback_to_savepoint(*, **, &); end
  def savepoint_errors_invalidate_transactions?; end
  def schema_cache; end
  def schema_migration; end
  def schema_version; end
  def seconds_idle; end
  def self.__callbacks; end
  def self.__callbacks=(value); end
  def self.__callbacks?; end
  def self._checkin_callbacks; end
  def self._checkin_callbacks=(value); end
  def self._checkout_callbacks; end
  def self._checkout_callbacks=(value); end
  def self.build_read_query_regexp(*parts); end
  def self.database_exists?(config); end
  def self.dbconsole(config, options = nil); end
  def self.extended_type_map(default_timezone:); end
  def self.extract_limit(sql_type); end
  def self.extract_precision(sql_type); end
  def self.extract_scale(sql_type); end
  def self.find_cmd_and_exec(commands, *args); end
  def self.initialize_type_map(m); end
  def self.register_class_with_limit(mapping, key, klass); end
  def self.register_class_with_precision(mapping, key, klass, **kwargs); end
  def self.type_cast_config_to_boolean(config); end
  def self.type_cast_config_to_integer(config); end
  def self.validate_default_timezone(config); end
  def shard; end
  def steal!; end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_check_constraints?; end
  def supports_comments?; end
  def supports_comments_in_create?; end
  def supports_common_table_expressions?; end
  def supports_concurrent_connections?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_deferrable_constraints?; end
  def supports_exclusion_constraints?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_foreign_tables?; end
  def supports_index_include?; end
  def supports_index_sort_order?; end
  def supports_indexes_in_create?; end
  def supports_insert_conflict_target?; end
  def supports_insert_on_duplicate_skip?; end
  def supports_insert_on_duplicate_update?; end
  def supports_insert_returning?; end
  def supports_json?; end
  def supports_lazy_transactions?; end
  def supports_materialized_views?; end
  def supports_nulls_not_distinct?; end
  def supports_optimizer_hints?; end
  def supports_partial_index?; end
  def supports_partitioned_indexes?; end
  def supports_restart_db_transaction?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_unique_constraints?; end
  def supports_validate_constraints?; end
  def supports_views?; end
  def supports_virtual_columns?; end
  def throw_away!; end
  def transform_query(sql); end
  def translate_exception(exception, message:, sql:, binds:); end
  def translate_exception_class(e, sql, binds); end
  def truncate(*, **, &); end
  def truncate_tables(*, **, &); end
  def type_map; end
  def unprepared_statement; end
  def update(*, **, &); end
  def use_metadata_table?; end
  def valid_raw_connection; end
  def valid_type?(type); end
  def verified!; end
  def verify!; end
  def visitor; end
  def warning_ignored?(warning); end
  def with_instrumenter(instrumenter, &block); end
  def with_raw_connection(allow_retry: nil, materialize_transactions: nil); end
  def without_prepared_statement?(binds); end
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  include ActiveRecord::ConnectionAdapters::DatabaseLimits
  include ActiveRecord::ConnectionAdapters::QueryCache
  include ActiveRecord::ConnectionAdapters::Quoting
  include ActiveRecord::ConnectionAdapters::Savepoints
  include ActiveSupport::Callbacks
end
class ActiveRecord::ConnectionAdapters::AbstractAdapter::Version
  def <=>(version_string); end
  def full_version_string; end
  def initialize(version_string, full_version_string = nil); end
  def to_s; end
  include Comparable
end
class ActiveRecord::ConnectionAdapters::StatementPool
  def [](key); end
  def []=(sql, stmt); end
  def cache; end
  def clear; end
  def dealloc(stmt); end
  def delete(key); end
  def each(&block); end
  def initialize(statement_limit = nil); end
  def key?(key); end
  def length; end
  def reset; end
  include Enumerable
end
class ActiveRecord::ConnectionAdapters::Column
  def ==(other); end
  def auto_incremented_by_db?; end
  def auto_populated?; end
  def bigint?; end
  def collation; end
  def comment; end
  def deduplicated; end
  def default; end
  def default_function; end
  def encode_with(coder); end
  def eql?(other); end
  def has_default?; end
  def hash; end
  def human_name; end
  def init_with(coder); end
  def initialize(name, default, sql_type_metadata = nil, null = nil, default_function = nil, collation: nil, comment: nil, **arg7); end
  def limit(*, **, &); end
  def name; end
  def null; end
  def precision(*, **, &); end
  def scale(*, **, &); end
  def sql_type(*, **, &); end
  def sql_type_metadata; end
  def type(*, **, &); end
  def virtual?; end
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::ConnectionAdapters::NullColumn < ActiveRecord::ConnectionAdapters::Column
  def initialize(name, **arg1); end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Column < ActiveRecord::ConnectionAdapters::Column
  def ==(other); end
  def array; end
  def array?; end
  def auto_incremented_by_db?; end
  def encode_with(coder); end
  def enum?; end
  def eql?(other); end
  def fmod(*, **, &); end
  def has_default?; end
  def hash; end
  def identity?; end
  def init_with(coder); end
  def initialize(*arg0, serial: nil, identity: nil, generated: nil, **arg4); end
  def oid(*, **, &); end
  def serial?; end
  def sql_type; end
  def virtual?; end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  def begin_db_transaction; end
  def begin_isolated_db_transaction(isolation); end
  def build_explain_clause(options = nil); end
  def build_truncate_statements(table_names); end
  def cancel_any_running_query; end
  def commit_db_transaction; end
  def exec_delete(sql, name = nil, binds = nil); end
  def exec_insert(sql, name = nil, binds = nil, pk = nil, sequence_name = nil, returning: nil); end
  def exec_restart_db_transaction; end
  def exec_rollback_db_transaction; end
  def exec_update(sql, name = nil, binds = nil); end
  def execute(*, **, &); end
  def execute_batch(statements, name = nil); end
  def explain(arel, binds = nil, options = nil); end
  def handle_warnings(sql); end
  def high_precision_current_timestamp; end
  def internal_exec_query(sql, name = nil, binds = nil, prepare: nil, async: nil, allow_retry: nil, materialize_transactions: nil); end
  def last_insert_id_result(sequence_name); end
  def query(sql, name = nil); end
  def raw_execute(sql, name, async: nil, allow_retry: nil, materialize_transactions: nil); end
  def returning_column_values(result); end
  def suppress_composite_primary_key(pk); end
  def warning_ignored?(warning); end
  def write_query?(sql); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::ExplainPrettyPrinter
  def pp(result); end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::OID
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array < ActiveModel::Type::Value
  def ==(other); end
  def cast(value); end
  def changed_in_place?(raw_old_value, new_value); end
  def delimiter; end
  def deserialize(value); end
  def force_equality?(value); end
  def initialize(subtype, delimiter = nil); end
  def limit(*, **, &); end
  def map(value, &block); end
  def precision(*, **, &); end
  def scale(*, **, &); end
  def serialize(value); end
  def subtype; end
  def type(*, **, &); end
  def type_cast_array(value, method); end
  def type_cast_for_schema(value); end
  def user_input_in_time_zone(*, **, &); end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Array::Data < Struct
  def encoder; end
  def encoder=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def values; end
  def values=(_); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit < ActiveModel::Type::Value
  def cast_value(value); end
  def serialize(value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit::Data
  def binary?; end
  def hex?; end
  def initialize(value); end
  def to_s; end
  def value; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::BitVarying < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bit
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Bytea < ActiveModel::Type::Binary
  def deserialize(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr < ActiveModel::Type::Value
  def cast_value(value); end
  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Date < ActiveRecord::Type::Date
  def cast_value(value); end
  def type_cast_for_schema(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime < ActiveRecord::Type::DateTime
  def cast_value(value); end
  def real_type_unless_aliased(real_type); end
  def type_cast_for_schema(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Decimal < ActiveModel::Type::Decimal
  def infinity(options = nil); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Enum < ActiveModel::Type::Value
  def cast_value(value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Hstore < ActiveModel::Type::Value
  def accessor; end
  def changed_in_place?(raw_old_value, new_value); end
  def deserialize(value); end
  def escape_hstore(value); end
  def serialize(value); end
  def type; end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Inet < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Cidr
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Interval < ActiveModel::Type::Value
  def cast_value(value); end
  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Jsonb < ActiveRecord::Type::Json
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Macaddr < ActiveModel::Type::String
  def changed?(old_value, new_value, _new_value_before_type_cast); end
  def changed_in_place?(raw_old_value, new_value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Money < ActiveModel::Type::Decimal
  def cast_value(value); end
  def scale; end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Oid < ActiveRecord::Type::UnsignedInteger
  def type; end
end
class ActiveRecord::Point < Struct
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def x; end
  def x=(_); end
  def y; end
  def y=(_); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Point < ActiveModel::Type::Value
  def build_point(x, y); end
  def cast(value); end
  def number_for_point(number); end
  def serialize(value); end
  def type; end
  def type_cast_for_schema(value); end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::LegacyPoint < ActiveModel::Type::Value
  def cast(value); end
  def number_for_point(number); end
  def serialize(value); end
  def type; end
  include ActiveModel::Type::Helpers::Mutable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Range < ActiveModel::Type::Value
  def ==(other); end
  def cast_value(value); end
  def extract_bounds(value); end
  def force_equality?(value); end
  def infinity(negative: nil); end
  def infinity?(value); end
  def initialize(subtype, type = nil); end
  def map(value); end
  def sanitize_bounds(from, to); end
  def serialize(value); end
  def subtype; end
  def type; end
  def type_cast_for_schema(value); end
  def type_cast_single(value); end
  def type_cast_single_for_database(value); end
  def unquote(value); end
  def user_input_in_time_zone(*, **, &); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::SpecializedString < ActiveModel::Type::String
  def initialize(type, **options); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Timestamp < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TimestampWithTimeZone < ActiveRecord::ConnectionAdapters::PostgreSQL::OID::DateTime
  def cast_value(value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Uuid < ActiveModel::Type::Value
  def cast_value(value); end
  def changed?(old_value, new_value, _new_value_before_type_cast); end
  def changed_in_place?(raw_old_value, new_value); end
  def serialize(value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Vector < ActiveModel::Type::Value
  def cast(value); end
  def delim; end
  def initialize(delim, subtype); end
  def subtype; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml < ActiveModel::Type::String
  def serialize(value); end
  def type; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::Xml::Data
  def initialize(value); end
  def to_s; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::OID::TypeMapInitializer
  def alias_type(oid, target); end
  def assert_valid_registration(oid, oid_type); end
  def initialize(store); end
  def query_conditions_for_array_types; end
  def query_conditions_for_known_type_names; end
  def query_conditions_for_known_type_types; end
  def register(oid, oid_type = nil, &block); end
  def register_array_type(row); end
  def register_composite_type(row); end
  def register_domain_type(row); end
  def register_enum_type(row); end
  def register_mapped_type(row); end
  def register_range_type(row); end
  def register_with_subtype(oid, target_oid); end
  def run(records); end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  def check_int_in_range(value); end
  def column_name_matcher; end
  def column_name_with_order_matcher; end
  def determine_encoding_of_strings_in_array(value); end
  def encode_array(array_data); end
  def encode_range(range); end
  def escape_bytea(value); end
  def infinity?(value); end
  def lookup_cast_type(sql_type); end
  def lookup_cast_type_from_column(column); end
  def quote(value); end
  def quote_column_name(name); end
  def quote_default_expression(value, column); end
  def quote_schema_name(name); end
  def quote_string(s); end
  def quote_table_name(name); end
  def quote_table_name_for_assignment(table, attr); end
  def quoted_binary(value); end
  def quoted_date(value); end
  def type_cast(value); end
  def type_cast_array(values); end
  def type_cast_range_value(value); end
  def unescape_bytea(value); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting::IntegerOutOf64BitRange < StandardError
  def initialize(msg); end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
  def check_all_foreign_keys_valid!; end
  def disable_referential_integrity; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaCreation < ActiveRecord::ConnectionAdapters::SchemaCreation
  def add_column_options!(sql, options); end
  def quoted_include_columns(o); end
  def quoted_include_columns_for_index(*, **, &); end
  def table_modifier_in_create(o); end
  def visit_AddExclusionConstraint(o); end
  def visit_AddForeignKey(o); end
  def visit_AddUniqueConstraint(o); end
  def visit_AlterTable(o); end
  def visit_ChangeColumnDefaultDefinition(o); end
  def visit_ChangeColumnDefinition(o); end
  def visit_CheckConstraintDefinition(o); end
  def visit_DropExclusionConstraint(name); end
  def visit_DropUniqueConstraint(name); end
  def visit_ExclusionConstraintDefinition(o); end
  def visit_ForeignKeyDefinition(o); end
  def visit_UniqueConstraintDefinition(o); end
  def visit_ValidateConstraint(name); end
end
class ActiveRecord::ConnectionAdapters::IndexDefinition
  def column_options; end
  def columns; end
  def comment; end
  def concise_options(options); end
  def defined_for?(columns = nil, name: nil, unique: nil, valid: nil, include: nil, nulls_not_distinct: nil, **options); end
  def include; end
  def initialize(table, name, unique = nil, columns = nil, lengths: nil, orders: nil, opclasses: nil, where: nil, type: nil, using: nil, include: nil, nulls_not_distinct: nil, comment: nil, valid: nil); end
  def lengths; end
  def name; end
  def nulls_not_distinct; end
  def opclasses; end
  def orders; end
  def table; end
  def type; end
  def unique; end
  def using; end
  def valid; end
  def valid?; end
  def where; end
end
class ActiveRecord::ConnectionAdapters::ColumnDefinition < Struct
  def aliased_types(name, fallback); end
  def collation; end
  def collation=(value); end
  def comment; end
  def comment=(value); end
  def default; end
  def default=(value); end
  def if_exists; end
  def if_exists=(value); end
  def if_not_exists; end
  def if_not_exists=(value); end
  def limit; end
  def limit=(value); end
  def name; end
  def name=(_); end
  def null; end
  def null=(value); end
  def options; end
  def options=(_); end
  def precision; end
  def precision=(value); end
  def primary_key?; end
  def scale; end
  def scale=(value); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def sql_type; end
  def sql_type=(_); end
  def type; end
  def type=(_); end
end
class ActiveRecord::ConnectionAdapters::AddColumnDefinition < Struct
  def column; end
  def column=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveRecord::ConnectionAdapters::ChangeColumnDefinition < Struct
  def column; end
  def column=(_); end
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveRecord::ConnectionAdapters::ChangeColumnDefaultDefinition < Struct
  def column; end
  def column=(_); end
  def default; end
  def default=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveRecord::ConnectionAdapters::CreateIndexDefinition < Struct
  def algorithm; end
  def algorithm=(_); end
  def if_not_exists; end
  def if_not_exists=(_); end
  def index; end
  def index=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveRecord::ConnectionAdapters::PrimaryKeyDefinition < Struct
  def name; end
  def name=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class ActiveRecord::ConnectionAdapters::ForeignKeyDefinition < Struct
  def column; end
  def custom_primary_key?; end
  def default_primary_key; end
  def deferrable; end
  def defined_for?(to_table: nil, validate: nil, **options); end
  def export_name_on_schema_dump?; end
  def from_table; end
  def from_table=(_); end
  def name; end
  def on_delete; end
  def on_update; end
  def options; end
  def options=(_); end
  def primary_key; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def to_table; end
  def to_table=(_); end
  def validate?; end
  def validated?; end
end
class ActiveRecord::ConnectionAdapters::CheckConstraintDefinition < Struct
  def defined_for?(name:, expression: nil, validate: nil, **options); end
  def export_name_on_schema_dump?; end
  def expression; end
  def expression=(_); end
  def name; end
  def options; end
  def options=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def table_name; end
  def table_name=(_); end
  def validate?; end
  def validated?; end
end
class ActiveRecord::ConnectionAdapters::ReferenceDefinition
  def add(table_name, connection); end
  def add_to(table); end
  def as_options(value); end
  def column_name; end
  def column_names; end
  def columns; end
  def conditional_options; end
  def foreign_key; end
  def foreign_key_options; end
  def foreign_table_name; end
  def index; end
  def index_options(table_name); end
  def initialize(name, polymorphic: nil, index: nil, foreign_key: nil, type: nil, **options); end
  def name; end
  def options; end
  def polymorphic; end
  def polymorphic_index_name(table_name); end
  def polymorphic_options; end
  def type; end
end
module ActiveRecord::ConnectionAdapters::ColumnMethods
  def primary_key(name, type = nil, **options); end
  extend ActiveSupport::Concern
end
module ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  def define_column_methods(*column_types); end
end
class ActiveRecord::ConnectionAdapters::TableDefinition
  def [](name); end
  def aliased_types(name, fallback); end
  def as; end
  def belongs_to(*args, **options); end
  def bigint(*names, **options); end
  def binary(*names, **options); end
  def blob(*names, **options); end
  def boolean(*names, **options); end
  def check_constraint(expression, **options); end
  def check_constraints; end
  def column(name, type, index: nil, **options); end
  def columns; end
  def comment; end
  def create_column_definition(name, type, options); end
  def date(*names, **options); end
  def datetime(*names, **options); end
  def decimal(*names, **options); end
  def float(*names, **options); end
  def foreign_key(to_table, **options); end
  def foreign_keys; end
  def if_not_exists; end
  def index(column_name, **options); end
  def indexes; end
  def initialize(conn, name, temporary: nil, if_not_exists: nil, options: nil, as: nil, comment: nil, **arg7); end
  def integer(*names, **options); end
  def integer_like_primary_key?(type, options); end
  def integer_like_primary_key_type(type, options); end
  def json(*names, **options); end
  def name; end
  def new_check_constraint_definition(expression, options); end
  def new_column_definition(name, type, **options); end
  def new_foreign_key_definition(to_table, options); end
  def numeric(*names, **options); end
  def options; end
  def primary_keys(name = nil); end
  def raise_on_duplicate_column(name); end
  def references(*args, **options); end
  def remove_column(name); end
  def set_primary_key(table_name, id, primary_key, **options); end
  def string(*names, **options); end
  def temporary; end
  def text(*names, **options); end
  def time(*names, **options); end
  def timestamp(*names, **options); end
  def timestamps(**options); end
  def valid_column_definition_options; end
  def virtual(*names, **options); end
  extend ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  include ActiveRecord::ConnectionAdapters::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::AlterTable
  def add_check_constraint(expression, options); end
  def add_column(name, type, **options); end
  def add_foreign_key(to_table, options); end
  def adds; end
  def check_constraint_adds; end
  def check_constraint_drops; end
  def drop_check_constraint(constraint_name); end
  def drop_foreign_key(name); end
  def foreign_key_adds; end
  def foreign_key_drops; end
  def initialize(td); end
  def name; end
end
class ActiveRecord::ConnectionAdapters::Table
  def belongs_to(*args, **options); end
  def bigint(*names, **options); end
  def binary(*names, **options); end
  def blob(*names, **options); end
  def boolean(*names, **options); end
  def change(column_name, type, **options); end
  def change_default(column_name, default_or_changes); end
  def change_null(column_name, null, default = nil); end
  def check_constraint(*args, **options); end
  def check_constraint_exists?(*args, **options); end
  def column(column_name, type, index: nil, **options); end
  def column_exists?(column_name, type = nil, **options); end
  def date(*names, **options); end
  def datetime(*names, **options); end
  def decimal(*names, **options); end
  def float(*names, **options); end
  def foreign_key(*args, **options); end
  def foreign_key_exists?(*args, **options); end
  def index(column_name, **options); end
  def index_exists?(column_name, **options); end
  def initialize(table_name, base); end
  def integer(*names, **options); end
  def json(*names, **options); end
  def name; end
  def numeric(*names, **options); end
  def raise_on_if_exist_options(options); end
  def references(*args, **options); end
  def remove(*column_names, **options); end
  def remove_belongs_to(*args, **options); end
  def remove_check_constraint(*args, **options); end
  def remove_foreign_key(*args, **options); end
  def remove_index(column_name = nil, **options); end
  def remove_references(*args, **options); end
  def remove_timestamps(**options); end
  def rename(column_name, new_column_name); end
  def rename_index(index_name, new_index_name); end
  def string(*names, **options); end
  def text(*names, **options); end
  def time(*names, **options); end
  def timestamp(*names, **options); end
  def timestamps(**options); end
  def virtual(*names, **options); end
  extend ActiveRecord::ConnectionAdapters::ColumnMethods::ClassMethods
  include ActiveRecord::ConnectionAdapters::ColumnMethods
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
  def primary_key(name, type = nil, **options); end
  extend ActiveSupport::Concern
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::ExclusionConstraintDefinition < Struct
  def deferrable; end
  def export_name_on_schema_dump?; end
  def expression; end
  def expression=(_); end
  def name; end
  def options; end
  def options=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def table_name; end
  def table_name=(_); end
  def using; end
  def where; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::UniqueConstraintDefinition < Struct
  def column; end
  def column=(_); end
  def deferrable; end
  def defined_for?(name: nil, column: nil, **options); end
  def export_name_on_schema_dump?; end
  def name; end
  def options; end
  def options=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
  def table_name; end
  def table_name=(_); end
  def using_index; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition < ActiveRecord::ConnectionAdapters::TableDefinition
  def aliased_types(name, fallback); end
  def bigserial(*names, **options); end
  def bit(*names, **options); end
  def bit_varying(*names, **options); end
  def box(*names, **options); end
  def cidr(*names, **options); end
  def circle(*names, **options); end
  def citext(*names, **options); end
  def daterange(*names, **options); end
  def enum(*names, **options); end
  def exclusion_constraint(expression, **options); end
  def exclusion_constraints; end
  def hstore(*names, **options); end
  def inet(*names, **options); end
  def initialize(*arg0, **arg1); end
  def int4range(*names, **options); end
  def int8range(*names, **options); end
  def integer_like_primary_key_type(type, options); end
  def interval(*names, **options); end
  def jsonb(*names, **options); end
  def line(*names, **options); end
  def lseg(*names, **options); end
  def ltree(*names, **options); end
  def macaddr(*names, **options); end
  def money(*names, **options); end
  def new_column_definition(name, type, **options); end
  def new_exclusion_constraint_definition(expression, options); end
  def new_unique_constraint_definition(column_name, options); end
  def numrange(*names, **options); end
  def oid(*names, **options); end
  def path(*names, **options); end
  def point(*names, **options); end
  def polygon(*names, **options); end
  def serial(*names, **options); end
  def timestamptz(*names, **options); end
  def tsrange(*names, **options); end
  def tstzrange(*names, **options); end
  def tsvector(*names, **options); end
  def unique_constraint(column_name, **options); end
  def unique_constraints; end
  def unlogged; end
  def uuid(*names, **options); end
  def valid_column_definition_options; end
  def xml(*names, **options); end
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Table < ActiveRecord::ConnectionAdapters::Table
  def bigserial(*names, **options); end
  def bit(*names, **options); end
  def bit_varying(*names, **options); end
  def box(*names, **options); end
  def cidr(*names, **options); end
  def circle(*names, **options); end
  def citext(*names, **options); end
  def daterange(*names, **options); end
  def enum(*names, **options); end
  def exclusion_constraint(*args); end
  def hstore(*names, **options); end
  def inet(*names, **options); end
  def int4range(*names, **options); end
  def int8range(*names, **options); end
  def interval(*names, **options); end
  def jsonb(*names, **options); end
  def line(*names, **options); end
  def lseg(*names, **options); end
  def ltree(*names, **options); end
  def macaddr(*names, **options); end
  def money(*names, **options); end
  def numrange(*names, **options); end
  def oid(*names, **options); end
  def path(*names, **options); end
  def point(*names, **options); end
  def polygon(*names, **options); end
  def remove_exclusion_constraint(*args); end
  def remove_unique_constraint(*args); end
  def serial(*names, **options); end
  def timestamptz(*names, **options); end
  def tsrange(*names, **options); end
  def tstzrange(*names, **options); end
  def tsvector(*names, **options); end
  def unique_constraint(*args); end
  def uuid(*names, **options); end
  def xml(*names, **options); end
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ColumnMethods
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::AlterTable < ActiveRecord::ConnectionAdapters::AlterTable
  def add_exclusion_constraint(expression, options); end
  def add_unique_constraint(column_name, options); end
  def constraint_validations; end
  def drop_exclusion_constraint(constraint_name); end
  def drop_unique_constraint(unique_constraint_name); end
  def exclusion_constraint_adds; end
  def exclusion_constraint_drops; end
  def initialize(td); end
  def unique_constraint_adds; end
  def unique_constraint_drops; end
  def validate_constraint(name); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaDumper < ActiveRecord::ConnectionAdapters::SchemaDumper
  def default_primary_key?(column); end
  def exclusion_constraints_in_create(table, stream); end
  def explicit_primary_key_default?(column); end
  def extensions(stream); end
  def extract_expression_for_virtual_column(column); end
  def prepare_column_options(column); end
  def schema_expression(column); end
  def schema_type(column); end
  def schemas(stream); end
  def types(stream); end
  def unique_constraints_in_create(table, stream); end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
  def add_column(table_name, column_name, type, **options); end
  def add_column_for_alter(table_name, column_name, type, **options); end
  def add_exclusion_constraint(table_name, expression, **options); end
  def add_foreign_key(from_table, to_table, **options); end
  def add_index(table_name, column_name, **options); end
  def add_index_opclass(quoted_columns, **options); end
  def add_index_options(table_name, column_name, **options); end
  def add_options_for_index_columns(quoted_columns, **options); end
  def add_unique_constraint(table_name, column_name = nil, **options); end
  def assert_valid_deferrable(deferrable); end
  def build_change_column_default_definition(table_name, column_name, default_or_changes); end
  def build_change_column_definition(table_name, column_name, type, **options); end
  def build_create_index_definition(table_name, column_name, **options); end
  def change_column(table_name, column_name, type, **options); end
  def change_column_comment(table_name, column_name, comment_or_changes); end
  def change_column_default(table_name, column_name, default_or_changes); end
  def change_column_for_alter(table_name, column_name, type, **options); end
  def change_column_null(table_name, column_name, null, default = nil); end
  def change_column_null_for_alter(table_name, column_name, null, default = nil); end
  def change_table_comment(table_name, comment_or_changes); end
  def check_constraints(table_name); end
  def client_min_messages; end
  def client_min_messages=(level); end
  def collation; end
  def column_names_from_column_numbers(table_oid, column_numbers); end
  def columns_for_distinct(columns, orders); end
  def create_alter_table(name); end
  def create_database(name, options = nil); end
  def create_schema(schema_name); end
  def create_schema_dumper(options); end
  def create_table_definition(name, **options); end
  def ctype; end
  def current_database; end
  def current_schema; end
  def data_source_sql(name = nil, type: nil); end
  def default_sequence_name(table_name, pk = nil); end
  def drop_database(name); end
  def drop_schema(schema_name, **options); end
  def drop_table(table_name, **options); end
  def encoding; end
  def exclusion_constraint_for!(table_name, expression: nil, **options); end
  def exclusion_constraint_for(table_name, **options); end
  def exclusion_constraint_name(table_name, **options); end
  def exclusion_constraint_options(table_name, expression, options); end
  def exclusion_constraints(table_name); end
  def extract_constraint_deferrable(deferrable, deferred); end
  def extract_foreign_key_action(specifier); end
  def extract_schema_qualified_name(string); end
  def fetch_type_metadata(column_name, sql_type, oid, fmod); end
  def foreign_key_column_for(table_name, column_name); end
  def foreign_keys(table_name); end
  def foreign_table_exists?(table_name); end
  def foreign_tables; end
  def index_name(table_name, options); end
  def index_name_exists?(table_name, index_name); end
  def indexes(table_name); end
  def new_column_from_field(table_name, field, _definitions); end
  def pk_and_sequence_for(table); end
  def primary_keys(table_name); end
  def quoted_include_columns_for_index(column_names); end
  def quoted_scope(name = nil, type: nil); end
  def recreate_database(name, options = nil); end
  def reference_name_for_table(table_name); end
  def remove_exclusion_constraint(table_name, expression = nil, **options); end
  def remove_index(table_name, column_name = nil, **options); end
  def remove_unique_constraint(table_name, column_name = nil, **options); end
  def rename_column(table_name, column_name, new_column_name); end
  def rename_index(table_name, old_name, new_name); end
  def rename_table(table_name, new_name, **options); end
  def reset_pk_sequence!(table, pk = nil, sequence = nil); end
  def schema_creation; end
  def schema_exists?(name); end
  def schema_names; end
  def schema_search_path; end
  def schema_search_path=(schema_csv); end
  def sequence_name_from_parts(table_name, column_name, suffix); end
  def serial_sequence(table, column); end
  def set_pk_sequence!(table, value); end
  def table_comment(table_name); end
  def table_options(table_name); end
  def type_to_sql(type, limit: nil, precision: nil, scale: nil, array: nil, enum_type: nil, **arg6); end
  def unique_constraint_for!(table_name, column: nil, **options); end
  def unique_constraint_for(table_name, **options); end
  def unique_constraint_name(table_name, **options); end
  def unique_constraint_options(table_name, column_name, options); end
  def unique_constraints(table_name); end
  def update_table_definition(table_name, base); end
  def validate_check_constraint(table_name, **options); end
  def validate_constraint(table_name, constraint_name); end
  def validate_foreign_key(from_table, to_table = nil, **options); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::TypeMetadata < Anonymous_Delegator_26
  def ==(other); end
  def deduplicated; end
  def eql?(other); end
  def fmod; end
  def hash; end
  def initialize(type_metadata, oid: nil, fmod: nil); end
  def oid; end
  extend ActiveRecord::ConnectionAdapters::Deduplicable::ClassMethods
  include ActiveRecord::ConnectionAdapters::Deduplicable
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Name
  def ==(o); end
  def eql?(o); end
  def hash; end
  def identifier; end
  def initialize(schema, identifier); end
  def parts; end
  def quoted; end
  def schema; end
  def to_s; end
end
module ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
  def extract_schema_qualified_name(string); end
  def unquote_identifier(identifier); end
  extend ActiveRecord::ConnectionAdapters::PostgreSQL::Utils
end
module ActiveRecord::ConnectionHandling
  def append_to_connected_to_stack(entry); end
  def clear_active_connections!(role = nil); end
  def clear_all_connections!(role = nil); end
  def clear_cache!; end
  def clear_query_caches_for_current_thread; end
  def clear_reloadable_connections!(role = nil); end
  def connected?; end
  def connected_to(role: nil, shard: nil, prevent_writes: nil, &blk); end
  def connected_to?(role:, shard: nil); end
  def connected_to_many(*classes, role:, shard: nil, prevent_writes: nil); end
  def connecting_to(role: nil, shard: nil, prevent_writes: nil); end
  def connection; end
  def connection_db_config; end
  def connection_pool; end
  def connection_specification_name; end
  def connection_specification_name=(arg0); end
  def connects_to(database: nil, shards: nil); end
  def deprecation_for_delegation(method); end
  def establish_connection(config_or_env = nil); end
  def flush_idle_connections!(role = nil); end
  def postgresql_adapter_class; end
  def postgresql_connection(config); end
  def primary_class?; end
  def prohibit_shard_swapping(enabled = nil); end
  def remove_connection(name = nil); end
  def resolve_config_for_connection(config_or_env); end
  def retrieve_connection; end
  def shard_swapping_prohibited?; end
  def while_preventing_writes(enabled = nil, &block); end
  def with_role_and_shard(role, shard, prevent_writes); end
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter < ActiveRecord::ConnectionAdapters::AbstractAdapter
  def active?; end
  def add_enum_value(type_name, value, options = nil); end
  def add_pg_decoders; end
  def add_pg_encoders; end
  def arel_visitor; end
  def build_insert_sql(insert); end
  def build_statement_pool; end
  def can_perform_case_insensitive_comparison_for?(column); end
  def check_version; end
  def column_definitions(table_name); end
  def configure_connection; end
  def connect; end
  def construct_coder(row, coder_class); end
  def create_enum(name, values, **options); end
  def create_unlogged_tables; end
  def create_unlogged_tables=(arg0); end
  def create_unlogged_tables?; end
  def datetime_type; end
  def datetime_type=(arg0); end
  def datetime_type?; end
  def default_index_type?(index); end
  def disable_extension(name, force: nil); end
  def discard!; end
  def disconnect!; end
  def drop_enum(name, values = nil, **options); end
  def enable_extension(name, **arg1); end
  def enum_types; end
  def exec_cache(sql, name, binds, async:, allow_retry:, materialize_transactions:); end
  def exec_no_cache(sql, name, binds, async:, allow_retry:, materialize_transactions:); end
  def execute_and_clear(sql, name, binds, prepare: nil, async: nil, allow_retry: nil, materialize_transactions: nil); end
  def extension_available?(name); end
  def extension_enabled?(name); end
  def extensions; end
  def extract_default_function(default_value, default); end
  def extract_value_from_default(default); end
  def get_advisory_lock(lock_id); end
  def get_database_version; end
  def get_oid_type(oid, fmod, column_name, sql_type = nil); end
  def has_default_function?(default_value, default); end
  def in_transaction?; end
  def index_algorithms; end
  def initialize(*, **, &); end
  def initialize_type_map(m = nil); end
  def is_cached_plan_failure?(e); end
  def load_additional_types(oids = nil); end
  def load_types_queries(initializer, oids); end
  def max_identifier_length; end
  def native_database_types; end
  def postgresql_version; end
  def prepare_statement(sql, binds, conn); end
  def reconfigure_connection_timezone; end
  def reconnect; end
  def release_advisory_lock(lock_id); end
  def reload_type_map; end
  def rename_enum(name, options = nil); end
  def rename_enum_value(type_name, options = nil); end
  def reset!; end
  def retryable_query_error?(exception); end
  def return_value_after_insert?(column); end
  def self.create_unlogged_tables; end
  def self.create_unlogged_tables=(value); end
  def self.create_unlogged_tables?; end
  def self.datetime_type; end
  def self.datetime_type=(value); end
  def self.datetime_type?; end
  def self.dbconsole(config, options = nil); end
  def self.initialize_type_map(m); end
  def self.native_database_types; end
  def self.new_client(conn_params); end
  def session_auth=(user); end
  def set_standard_conforming_strings; end
  def sql_key(sql); end
  def supports_advisory_locks?; end
  def supports_bulk_alter?; end
  def supports_check_constraints?; end
  def supports_comments?; end
  def supports_common_table_expressions?; end
  def supports_datetime_with_precision?; end
  def supports_ddl_transactions?; end
  def supports_deferrable_constraints?; end
  def supports_exclusion_constraints?; end
  def supports_explain?; end
  def supports_expression_index?; end
  def supports_extensions?; end
  def supports_foreign_keys?; end
  def supports_foreign_tables?; end
  def supports_identity_columns?; end
  def supports_index_include?; end
  def supports_index_sort_order?; end
  def supports_insert_conflict_target?; end
  def supports_insert_on_conflict?; end
  def supports_insert_on_duplicate_skip?; end
  def supports_insert_on_duplicate_update?; end
  def supports_insert_returning?; end
  def supports_json?; end
  def supports_lazy_transactions?; end
  def supports_materialized_views?; end
  def supports_nulls_not_distinct?; end
  def supports_optimizer_hints?; end
  def supports_partial_index?; end
  def supports_partitioned_indexes?; end
  def supports_pgcrypto_uuid?; end
  def supports_restart_db_transaction?; end
  def supports_savepoints?; end
  def supports_transaction_isolation?; end
  def supports_unique_constraints?; end
  def supports_validate_constraints?; end
  def supports_views?; end
  def supports_virtual_columns?; end
  def translate_exception(exception, message:, sql:, binds:); end
  def type_map; end
  def update_typemap_for_default_timezone; end
  def use_insert_returning?; end
  include ActiveRecord::ConnectionAdapters::PostgreSQL::DatabaseStatements
  include ActiveRecord::ConnectionAdapters::PostgreSQL::Quoting
  include ActiveRecord::ConnectionAdapters::PostgreSQL::ReferentialIntegrity
  include ActiveRecord::ConnectionAdapters::PostgreSQL::SchemaStatements
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::StatementPool < ActiveRecord::ConnectionAdapters::StatementPool
  def dealloc(key); end
  def initialize(connection, max); end
  def next_key; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQLAdapter::MoneyDecoder < PG::SimpleDecoder
  def decode(value, tuple = nil, field = nil); end
end
class ActiveRecord::DatabaseConfigurations
  def any?(*, **, &); end
  def blank?; end
  def build_configs(configs); end
  def build_configuration_sentence; end
  def build_db_config_from_hash(env_name, name, config); end
  def build_db_config_from_raw_config(env_name, name, config); end
  def build_db_config_from_string(env_name, name, config); end
  def configs_for(env_name: nil, name: nil, config_key: nil, include_hidden: nil); end
  def configurations; end
  def default_env; end
  def empty?; end
  def env_with_configs(env = nil); end
  def environment_url_config(env, name, config); end
  def environment_value_for(name); end
  def find_db_config(env); end
  def initialize(configurations = nil); end
  def merge_db_environment_variables(current_env, configs); end
  def primary?(name); end
  def resolve(config); end
  def resolve_symbol_connection(name); end
  def self.db_config_handlers; end
  def self.db_config_handlers=(arg0); end
  def self.register_db_config_handler(&block); end
  def walk_configs(env_name, config); end
end
class ActiveRecord::DatabaseConfigurations::DatabaseConfig
  def _database=(database); end
  def adapter; end
  def adapter_class_method; end
  def adapter_method; end
  def checkout_timeout; end
  def database; end
  def env_name; end
  def for_current_env?; end
  def host; end
  def idle_timeout; end
  def initialize(env_name, name); end
  def max_queue; end
  def max_threads; end
  def migrations_paths; end
  def min_threads; end
  def name; end
  def pool; end
  def query_cache; end
  def reaping_frequency; end
  def replica?; end
  def schema_cache_path; end
end
class ActiveRecord::DatabaseConfigurations::HashConfig < ActiveRecord::DatabaseConfigurations::DatabaseConfig
  def _database=(database); end
  def adapter; end
  def checkout_timeout; end
  def configuration_hash; end
  def database; end
  def database_tasks?; end
  def default_schema_cache_path; end
  def host; end
  def idle_timeout; end
  def initialize(env_name, name, configuration_hash); end
  def lazy_schema_cache_path; end
  def max_queue; end
  def max_threads; end
  def migrations_paths; end
  def min_threads; end
  def pool; end
  def primary?; end
  def query_cache; end
  def reaping_frequency; end
  def replica?; end
  def schema_cache_path; end
  def schema_dump(format = nil); end
  def schema_file_type(format); end
  def socket; end
end
class ActiveRecord::DatabaseConfigurations::UrlConfig < ActiveRecord::DatabaseConfigurations::HashConfig
  def build_url_hash; end
  def initialize(env_name, name, url, configuration_hash = nil); end
  def url; end
end
class ActiveRecord::DatabaseConfigurations::ConnectionUrlResolver
  def database_from_path; end
  def initialize(url); end
  def query_hash; end
  def raw_config; end
  def to_hash; end
  def uri; end
  def uri_parser; end
end
class ActiveRecord::DatabaseConfigurations::InvalidConfigurationError < StandardError
end
class ActiveRecord::Tasks::DatabaseNotSupported < StandardError
end
module ActiveRecord::Tasks::DatabaseTasks
  def cache_dump_filename(db_config_name, schema_cache_path: nil); end
  def charset(configuration, *arguments); end
  def charset_current(env_name = nil, db_name = nil); end
  def check_current_protected_environment!(db_config); end
  def check_protected_environments!(environment = nil); end
  def check_schema_file(filename); end
  def check_target_version; end
  def class_for_adapter(adapter); end
  def clear_schema_cache(filename); end
  def collation(configuration, *arguments); end
  def collation_current(env_name = nil, db_name = nil); end
  def configs_for(**options); end
  def create(configuration, *arguments); end
  def create_all; end
  def create_current(environment = nil, name = nil); end
  def database_adapter_for(db_config, *arguments); end
  def database_configuration; end
  def database_configuration=(arg0); end
  def db_configs_with_versions(db_configs); end
  def db_dir; end
  def db_dir=(arg0); end
  def drop(configuration, *arguments); end
  def drop_all; end
  def drop_current(environment = nil); end
  def dump_schema(db_config, format = nil); end
  def dump_schema_cache(conn, filename); end
  def each_current_configuration(environment, name = nil); end
  def each_local_configuration; end
  def env; end
  def env=(arg0); end
  def fixtures_path; end
  def fixtures_path=(arg0); end
  def for_each(databases); end
  def load_schema(db_config, format = nil, file = nil); end
  def load_schema_current(format = nil, file = nil, environment = nil); end
  def load_seed; end
  def local_database?(db_config); end
  def migrate(version = nil); end
  def migrate_status; end
  def migration_class; end
  def migration_connection; end
  def migrations_paths; end
  def migrations_paths=(arg0); end
  def name; end
  def prepare_all; end
  def purge(configuration); end
  def purge_all; end
  def purge_current(environment = nil); end
  def raise_for_multi_db(environment = nil, command:); end
  def reconstruct_from_schema(db_config, format = nil, file = nil); end
  def register_task(pattern, task); end
  def resolve_configuration(configuration); end
  def root; end
  def root=(arg0); end
  def schema_dump_path(db_config, format = nil); end
  def schema_sha1(file); end
  def schema_up_to_date?(configuration, format = nil, file = nil); end
  def seed_loader; end
  def seed_loader=(arg0); end
  def self.structure_dump_flags; end
  def self.structure_dump_flags=(val); end
  def self.structure_load_flags; end
  def self.structure_load_flags=(val); end
  def setup_initial_database_yaml; end
  def structure_dump(configuration, *arguments); end
  def structure_dump_flags_for(adapter); end
  def structure_load(configuration, *arguments); end
  def structure_load_flags_for(adapter); end
  def target_version; end
  def truncate_all(environment = nil); end
  def truncate_tables(db_config); end
  def verbose?; end
  def with_temporary_connection(db_config, clobber: nil); end
  def with_temporary_connection_for_each(env: nil, name: nil, clobber: nil, &block); end
  def with_temporary_pool(db_config, clobber: nil); end
  extend ActiveRecord::Tasks::DatabaseTasks
end
class ActiveRecord::LogSubscriber < ActiveSupport::LogSubscriber
end
class ActiveRecord::ExplainRegistry
end
class ActiveRecord::ExplainSubscriber
end
module ActiveRecord::Delegation
  extend ActiveSupport::Concern
end
module ActiveRecord::Delegation::DelegateCache
end
class ActiveRecord::Delegation::GeneratedRelationMethods < Module
  include Mutex_m
end
module ActiveRecord::Delegation::ClassSpecificRelation
  extend ActiveSupport::Concern
end
module ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
end
module ActiveRecord::Delegation::ClassMethods
end
module ActiveRecord::Attributes
  extend ActiveSupport::Concern
end
module ActiveRecord::Attributes::ClassMethods
end
module ActiveRecord::TypeCaster
end
class ActiveRecord::TypeCaster::Map
end
class ActiveRecord::TypeCaster::Connection
end
class ActiveRecord::QueryCache
end
module ActiveRecord::QueryCache::ClassMethods
end
module ActiveRecord::Querying
end
module ActiveRecord::Translation
  include ActiveModel::Translation
end
module ActiveRecord::DynamicMatchers
end
class ActiveRecord::DynamicMatchers::Method
end
class ActiveRecord::DynamicMatchers::FindBy < ActiveRecord::DynamicMatchers::Method
end
class ActiveRecord::DynamicMatchers::FindByBang < ActiveRecord::DynamicMatchers::Method
end
module ActiveRecord::DelegatedType
end
module ActiveRecord::Explain
end
module ActiveRecord::Enum
end
class ActiveRecord::Enum::EnumType < ActiveModel::Type::Value
end
class ActiveRecord::Enum::EnumMethods < Module
end
module ActiveRecord::Aggregations
end
module ActiveRecord::Aggregations::ClassMethods
end
module ActiveRecord::Core
  extend ActiveSupport::Concern
  include ActiveModel::Access
end
module ActiveRecord::Core::ClassMethods
end
class ActiveRecord::Core::InspectionMask < Anonymous_Delegator_27
end
class ActiveRecord::ConnectionAdapters::ConnectionHandler
end
class ActiveRecord::ConnectionAdapters::ConnectionHandler::StringConnectionName
end
class ActiveRecord::InsertAll
end
class ActiveRecord::InsertAll::Builder
end
module ActiveRecord::Persistence
  extend ActiveSupport::Concern
end
module ActiveRecord::Persistence::ClassMethods
end
class ActiveRecord::ReadonlyAttributeError < ActiveRecord::ActiveRecordError
end
module ActiveRecord::ReadonlyAttributes
  extend ActiveSupport::Concern
end
module ActiveRecord::ReadonlyAttributes::ClassMethods
end
module ActiveRecord::ReadonlyAttributes::HasReadonlyAttributes
end
module ActiveRecord::ModelSchema
  extend ActiveSupport::Concern
end
module ActiveRecord::ModelSchema::ClassMethods
end
module ActiveRecord::Inheritance
  extend ActiveSupport::Concern
end
module ActiveRecord::Inheritance::ClassMethods
end
class ActiveRecord::Scoping::DefaultScope
end
module ActiveRecord::Scoping::Default
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::Default::ClassMethods
end
module ActiveRecord::Scoping::Named
  extend ActiveSupport::Concern
end
module ActiveRecord::Scoping::Named::ClassMethods
end
module ActiveRecord::Sanitization
  extend ActiveSupport::Concern
end
module ActiveRecord::Sanitization::ClassMethods
end
module ActiveRecord::AttributeAssignment
  include ActiveModel::AttributeAssignment
end
module ActiveRecord::Integration
  extend ActiveSupport::Concern
end
module ActiveRecord::Integration::ClassMethods
end
module ActiveRecord::Validations
  extend ActiveSupport::Concern
  include ActiveModel::Validations
end
class ActiveRecord::Validations::AssociatedValidator < ActiveModel::EachValidator
end
module ActiveRecord::Validations::ClassMethods
end
class ActiveRecord::Validations::UniquenessValidator < ActiveModel::EachValidator
end
class ActiveRecord::Validations::PresenceValidator < ActiveModel::Validations::PresenceValidator
end
class ActiveRecord::Validations::AbsenceValidator < ActiveModel::Validations::AbsenceValidator
end
class ActiveRecord::Validations::LengthValidator < ActiveModel::Validations::LengthValidator
end
class ActiveRecord::Validations::NumericalityValidator < ActiveModel::Validations::NumericalityValidator
end
class ActiveRecord::RecordInvalid < ActiveRecord::ActiveRecordError
end
module ActiveRecord::CounterCache
  extend ActiveSupport::Concern
end
module ActiveRecord::CounterCache::ClassMethods
end
module ActiveRecord::Locking::Optimistic
  extend ActiveSupport::Concern
end
module ActiveRecord::Locking::Optimistic::ClassMethods
end
class ActiveRecord::Locking::LockingType < Anonymous_Delegator_28
end
module ActiveRecord::Locking::Pessimistic
end
module ActiveRecord::Encryption
  extend ActiveRecord::Encryption::Configurable::ClassMethods
  extend ActiveRecord::Encryption::Contexts::ClassMethods
  extend ActiveSupport::Autoload
  include ActiveRecord::Encryption::Configurable
  include ActiveRecord::Encryption::Contexts
end
class ActiveRecord::Encryption::Cipher
  extend ActiveSupport::Autoload
end
class ActiveRecord::Encryption::Context
end
module ActiveRecord::Encryption::Configurable
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::Configurable::ClassMethods
end
class ActiveRecord::Encryption::Config
end
module ActiveRecord::Encryption::Contexts
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::Contexts::ClassMethods
end
class ActiveRecord::Encryption::KeyGenerator
end
module ActiveRecord::Encryption::Errors
end
class ActiveRecord::Encryption::Errors::Base < StandardError
end
class ActiveRecord::Encryption::Errors::Encoding < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Decryption < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Encryption < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::Configuration < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::ForbiddenClass < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Errors::EncryptedContentIntegrity < ActiveRecord::Encryption::Errors::Base
end
class ActiveRecord::Encryption::Encryptor
end
class ActiveRecord::Encryption::MessageSerializer
end
module ActiveRecord::Encryption::EncryptableRecord
  extend ActiveSupport::Concern
end
module ActiveRecord::Encryption::EncryptableRecord::ClassMethods
end
module ActiveRecord::AttributeMethods::Read
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Read::ClassMethods
end
module ActiveRecord::AttributeMethods::Write
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Write::ClassMethods
end
module ActiveRecord::AttributeMethods::BeforeTypeCast
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::Query
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::PrimaryKey
  extend ActiveSupport::Concern
end
module ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
end
module ActiveRecord::AttributeMethods::TimeZoneConversion
  extend ActiveSupport::Concern
end
class ActiveRecord::AttributeMethods::TimeZoneConversion::TimeZoneConverter < Anonymous_Delegator_29
end
module ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
end
module ActiveRecord::AttributeMethods::Dirty
  extend ActiveSupport::Concern
  include ActiveModel::Dirty
end
module ActiveRecord::Timestamp
  extend ActiveSupport::Concern
end
module ActiveRecord::Timestamp::ClassMethods
end
module ActiveRecord::AttributeMethods::Serialization
  extend ActiveSupport::Concern
end
class ActiveRecord::AttributeMethods::Serialization::ColumnNotSerializableError < StandardError
end
module ActiveRecord::AttributeMethods::Serialization::ClassMethods
end
class ActiveRecord::Coders::ColumnSerializer
end
class ActiveRecord::Coders::YAMLColumn < ActiveRecord::Coders::ColumnSerializer
end
class ActiveRecord::Coders::YAMLColumn::SafeCoder
end
module ActiveRecord::Callbacks
  extend ActiveSupport::Concern
end
module ActiveRecord::Callbacks::ClassMethods
  include ActiveModel::Callbacks
end
class ActiveRecord::AssociationNotFoundError < ActiveRecord::ConfigurationError
  include DidYouMean::Correctable
end
class ActiveRecord::InverseOfAssociationNotFoundError < ActiveRecord::ActiveRecordError
  include DidYouMean::Correctable
end
class ActiveRecord::InverseOfAssociationRecursiveError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationNotFoundError < ActiveRecord::ActiveRecordError
  include DidYouMean::Correctable
end
class ActiveRecord::HasManyThroughAssociationPolymorphicSourceError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationPolymorphicThroughError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughAssociationPointlessSourceTypeError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasOneThroughCantAssociateThroughCollection < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasOneAssociationPolymorphicThroughError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughSourceAssociationNotFoundError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughOrderError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ActiveRecordError
end
class ActiveRecord::CompositePrimaryKeyMismatchError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::AmbiguousSourceReflectionForThroughAssociation < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection
end
class ActiveRecord::HasOneThroughCantAssociateThroughHasOneOrManyReflection < ActiveRecord::ThroughCantAssociateThroughHasOneOrManyReflection
end
class ActiveRecord::ThroughNestedAssociationsAreReadonly < ActiveRecord::ActiveRecordError
end
class ActiveRecord::HasManyThroughNestedAssociationsAreReadonly < ActiveRecord::ThroughNestedAssociationsAreReadonly
end
class ActiveRecord::HasOneThroughNestedAssociationsAreReadonly < ActiveRecord::ThroughNestedAssociationsAreReadonly
end
class ActiveRecord::EagerLoadPolymorphicError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::DeleteRestrictionError < ActiveRecord::ActiveRecordError
end
module ActiveRecord::Associations
  extend ActiveSupport::Autoload
  extend ActiveSupport::Concern
end
module ActiveRecord::Associations::Builder
end
module ActiveRecord::Associations::ClassMethods
end
module ActiveRecord::SecurePassword
  extend ActiveSupport::Concern
  include ActiveModel::SecurePassword
end
module ActiveRecord::SecurePassword::ClassMethods
end
module ActiveRecord::AutosaveAssociation
  extend ActiveSupport::Concern
end
module ActiveRecord::AutosaveAssociation::AssociationBuilderExtension
end
module ActiveRecord::AutosaveAssociation::ClassMethods
end
class ActiveRecord::Associations::Builder::Association
end
module ActiveRecord::NestedAttributes
  extend ActiveSupport::Concern
end
class ActiveRecord::NestedAttributes::TooManyRecords < ActiveRecord::ActiveRecordError
end
module ActiveRecord::NestedAttributes::ClassMethods
end
module ActiveRecord::Transactions
  extend ActiveSupport::Concern
end
module ActiveRecord::Transactions::ClassMethods
end
module ActiveRecord::TouchLater
end
module ActiveRecord::NoTouching
  extend ActiveSupport::Concern
end
module ActiveRecord::NoTouching::ClassMethods
end
module ActiveRecord::Serialization
  extend ActiveSupport::Concern
  include ActiveModel::Serializers::JSON
end
module ActiveRecord::Store
  extend ActiveSupport::Concern
end
module ActiveRecord::Store::ClassMethods
end
class ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::StringKeyedHashAccessor < ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::IndifferentHashAccessor < ActiveRecord::Store::HashAccessor
end
class ActiveRecord::Store::IndifferentCoder
end
module ActiveRecord::SecureToken
  extend ActiveSupport::Concern
end
class ActiveRecord::SecureToken::MinimumLengthError < StandardError
end
module ActiveRecord::SecureToken::ClassMethods
end
module ActiveRecord::TokenFor
  extend ActiveSupport::Concern
end
module ActiveRecord::TokenFor::ClassMethods
end
module ActiveRecord::SignedId
  extend ActiveSupport::Concern
end
module ActiveRecord::SignedId::ClassMethods
end
module ActiveRecord::Suppressor
  extend ActiveSupport::Concern
end
module ActiveRecord::Suppressor::ClassMethods
end
module ActiveRecord::Normalization
  extend ActiveSupport::Concern
end
module ActiveRecord::Normalization::ClassMethods
end
class ActiveRecord::Normalization::NormalizedValueType < Anonymous_Delegator_30
  extend ActiveModel::Type::SerializeCastValue::ClassMethods
  include ActiveModel::Type::SerializeCastValue
end
module ActiveRecord::Marshalling
end
module ActiveRecord::Marshalling::Methods
end
class ActiveRecord::Base
  extend ActiveModel::AttributeMethods::ClassMethods
  extend ActiveModel::Callbacks
  extend ActiveModel::Conversion::ClassMethods
  extend ActiveModel::Naming
  extend ActiveModel::Naming
  extend ActiveModel::Naming
  extend ActiveModel::SecurePassword::ClassMethods
  extend ActiveModel::Translation
  extend ActiveModel::Validations::Callbacks::ClassMethods
  extend ActiveModel::Validations::ClassMethods
  extend ActiveModel::Validations::HelperMethods
  extend ActiveRecord::Aggregations::ClassMethods
  extend ActiveRecord::Associations::ClassMethods
  extend ActiveRecord::AttributeMethods::ClassMethods
  extend ActiveRecord::AttributeMethods::PrimaryKey::ClassMethods
  extend ActiveRecord::AttributeMethods::Read::ClassMethods
  extend ActiveRecord::AttributeMethods::Serialization::ClassMethods
  extend ActiveRecord::AttributeMethods::TimeZoneConversion::ClassMethods
  extend ActiveRecord::AttributeMethods::Write::ClassMethods
  extend ActiveRecord::Attributes::ClassMethods
  extend ActiveRecord::AutosaveAssociation::ClassMethods
  extend ActiveRecord::Callbacks::ClassMethods
  extend ActiveRecord::ConnectionHandling
  extend ActiveRecord::Core::ClassMethods
  extend ActiveRecord::CounterCache::ClassMethods
  extend ActiveRecord::DelegatedType
  extend ActiveRecord::Delegation::DelegateCache
  extend ActiveRecord::DynamicMatchers
  extend ActiveRecord::Encryption::EncryptableRecord::ClassMethods
  extend ActiveRecord::Enum
  extend ActiveRecord::Explain
  extend ActiveRecord::Inheritance::ClassMethods
  extend ActiveRecord::Integration::ClassMethods
  extend ActiveRecord::Locking::Optimistic::ClassMethods
  extend ActiveRecord::ModelSchema::ClassMethods
  extend ActiveRecord::NestedAttributes::ClassMethods
  extend ActiveRecord::NoTouching::ClassMethods
  extend ActiveRecord::Normalization::ClassMethods
  extend ActiveRecord::Persistence::ClassMethods
  extend ActiveRecord::QueryCache::ClassMethods
  extend ActiveRecord::Querying
  extend ActiveRecord::ReadonlyAttributes::ClassMethods
  extend ActiveRecord::Reflection::ClassMethods
  extend ActiveRecord::Sanitization::ClassMethods
  extend ActiveRecord::Scoping::ClassMethods
  extend ActiveRecord::Scoping::Default::ClassMethods
  extend ActiveRecord::Scoping::Named::ClassMethods
  extend ActiveRecord::SecurePassword::ClassMethods
  extend ActiveRecord::SecureToken::ClassMethods
  extend ActiveRecord::SignedId::ClassMethods
  extend ActiveRecord::Store::ClassMethods
  extend ActiveRecord::Suppressor::ClassMethods
  extend ActiveRecord::Timestamp::ClassMethods
  extend ActiveRecord::TokenFor::ClassMethods
  extend ActiveRecord::Transactions::ClassMethods
  extend ActiveRecord::Translation
  extend ActiveRecord::Validations::ClassMethods
  extend ActiveSupport::Benchmarkable
  extend ActiveSupport::Callbacks::ClassMethods
  extend ActiveSupport::DescendantsTracker
  extend ActiveSupport::DescendantsTracker
  include ActiveModel::AttributeMethods
  include ActiveModel::AttributeMethods
  include ActiveModel::Conversion
  include ActiveModel::Dirty
  include ActiveModel::SecurePassword
  include ActiveModel::Serializers::JSON
  include ActiveModel::Validations
  include ActiveModel::Validations::Callbacks
  include ActiveModel::Validations::HelperMethods
  include ActiveRecord::Associations
  include ActiveRecord::AttributeAssignment
  include ActiveRecord::AttributeMethods
  include ActiveRecord::AttributeMethods::BeforeTypeCast
  include ActiveRecord::AttributeMethods::Dirty
  include ActiveRecord::AttributeMethods::PrimaryKey
  include ActiveRecord::AttributeMethods::Query
  include ActiveRecord::AttributeMethods::Read
  include ActiveRecord::AttributeMethods::Serialization
  include ActiveRecord::AttributeMethods::TimeZoneConversion
  include ActiveRecord::AttributeMethods::Write
  include ActiveRecord::Attributes
  include ActiveRecord::AutosaveAssociation
  include ActiveRecord::Base::GeneratedAssociationMethods
  include ActiveRecord::Base::GeneratedAttributeMethods
  include ActiveRecord::Callbacks
  include ActiveRecord::Core
  include ActiveRecord::CounterCache
  include ActiveRecord::Encryption::EncryptableRecord
  include ActiveRecord::Inheritance
  include ActiveRecord::Integration
  include ActiveRecord::Locking::Optimistic
  include ActiveRecord::Locking::Pessimistic
  include ActiveRecord::Marshalling::Methods
  include ActiveRecord::ModelSchema
  include ActiveRecord::NestedAttributes
  include ActiveRecord::NoTouching
  include ActiveRecord::Normalization
  include ActiveRecord::Persistence
  include ActiveRecord::ReadonlyAttributes
  include ActiveRecord::Reflection
  include ActiveRecord::Sanitization
  include ActiveRecord::Scoping
  include ActiveRecord::Scoping::Default
  include ActiveRecord::Scoping::Named
  include ActiveRecord::SecurePassword
  include ActiveRecord::SecureToken
  include ActiveRecord::Serialization
  include ActiveRecord::SignedId
  include ActiveRecord::Store
  include ActiveRecord::Suppressor
  include ActiveRecord::Timestamp
  include ActiveRecord::TokenFor
  include ActiveRecord::TouchLater
  include ActiveRecord::Transactions
  include ActiveRecord::Validations
  include ActiveSupport::Callbacks
  include ActiveSupport::Callbacks
end
module ActiveRecord::Base::GeneratedAttributeMethods
end
module ActiveRecord::Base::GeneratedAssociationMethods
end
class ActiveRecord::ConnectionAdapters::SchemaReflection
end
class ActiveRecord::ConnectionAdapters::BoundSchemaReflection
end
class ActiveRecord::ConnectionAdapters::SchemaCache
end
class ActiveRecord::ConnectionAdapters::PoolConfig
  include Mutex_m
end
class ActiveRecord::ConnectionAdapters::PoolManager
end
class ActiveRecord::ConnectionAdapters::ConnectionPool
  include ActiveRecord::ConnectionAdapters::AbstractPool
  include ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration
  include MonitorMixin
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
end
module ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue::BiasedConditionVariable
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::ConnectionLeasingQueue < ActiveRecord::ConnectionAdapters::ConnectionPool::Queue
  include ActiveRecord::ConnectionAdapters::ConnectionPool::BiasableQueue
end
class ActiveRecord::ConnectionAdapters::ConnectionPool::Reaper
end
module ActiveRecord::ConnectionAdapters::AbstractPool
end
class ActiveRecord::ConnectionAdapters::NullPool
  include ActiveRecord::ConnectionAdapters::AbstractPool
end
class ActiveRecord::ConnectionAdapters::NullPool::NullConfig
end
module ActiveRecord::RuntimeRegistry
  extend ActiveRecord::RuntimeRegistry
end
module ActiveRecord::Railties
end
module ActiveRecord::Railties::ControllerRuntime
  extend ActiveSupport::Concern
end
module ActiveRecord::Railties::ControllerRuntime::ClassMethods
end
module ActiveRecord::Railties::JobRuntime
end
class ActiveRecord::AsynchronousQueriesTracker
end
module ActiveRecord::AsynchronousQueriesTracker::NullSession
end
class ActiveRecord::AsynchronousQueriesTracker::Session
end
class ActiveRecord::Encryption::AutoFilteredParameters
end
module ActiveRecord::FinderMethods
end
module ActiveRecord::Calculations
end
class ActiveRecord::Calculations::ColumnAliasTracker
end
class ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassMethods
  include ActiveRecord::FinderMethods
  include Enumerable
end
class ActiveRecord::Relation::HashMerger
end
class ActiveRecord::Relation::Merger
end
module ActiveRecord::SpawnMethods
end
class ActiveRecord::Relation::FromClause
end
class ActiveRecord::Relation::QueryAttribute < ActiveModel::Attribute
end
class ActiveRecord::Relation::WhereClause
end
module ActiveRecord::QueryMethods
  include ActiveModel::ForbiddenAttributesProtection
end
class ActiveRecord::QueryMethods::WhereChain
end
class ActiveRecord::QueryMethods::CTEJoin
end
module ActiveRecord::Batches
end
class ActiveRecord::Batches::BatchEnumerator
  include Enumerable
end
class ActiveRecord::Relation::StrictLoadingScope
end
class ActiveRecord::Associations::CollectionProxy < ActiveRecord::Relation
end
class ActiveRecord::AssociationRelation < ActiveRecord::Relation
end
class ActiveRecord::DisableJoinsAssociationRelation < ActiveRecord::Relation
end
class ActiveRecord::Associations::Builder::SingularAssociation < ActiveRecord::Associations::Builder::Association
end
class ActiveRecord::Associations::Builder::HasOne < ActiveRecord::Associations::Builder::SingularAssociation
end
class ActiveRecord::Associations::Builder::BelongsTo < ActiveRecord::Associations::Builder::SingularAssociation
end
class ActiveRecord::Associations::Builder::CollectionAssociation < ActiveRecord::Associations::Builder::Association
end
class ActiveRecord::Associations::Builder::HasMany < ActiveRecord::Associations::Builder::CollectionAssociation
end
module ActiveRecord::Coders::JSON
end
class ActiveRecord::Schema < ActiveRecord::Migration::Current
  extend ActiveRecord::Schema::Definition::ClassMethods
  include ActiveRecord::Schema::Definition
end
module ActiveRecord::Schema::Definition
  extend ActiveSupport::Concern
end
module ActiveRecord::Schema::Definition::ClassMethods
end
module ActiveRecord::Migration::Compatibility
end
class ActiveRecord::Migration::Compatibility::V7_0 < ActiveRecord::Migration::Current
  include ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName
end
module ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName
end
module ActiveRecord::Migration::Compatibility::V7_0::TableDefinition
  include ActiveRecord::Migration::Compatibility::V7_0::LegacyIndexName
end
class ActiveRecord::Migration::Compatibility::V6_1 < ActiveRecord::Migration::Compatibility::V7_0
end
class ActiveRecord::Migration::Compatibility::V6_1::PostgreSQLCompat
end
module ActiveRecord::Migration::Compatibility::V6_1::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V6_0 < ActiveRecord::Migration::Compatibility::V6_1
end
class ActiveRecord::Migration::Compatibility::V6_0::ReferenceDefinition < ActiveRecord::ConnectionAdapters::ReferenceDefinition
end
module ActiveRecord::Migration::Compatibility::V6_0::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V5_2 < ActiveRecord::Migration::Compatibility::V6_0
end
module ActiveRecord::Migration::Compatibility::V5_2::TableDefinition
end
module ActiveRecord::Migration::Compatibility::V5_2::CommandRecorder
end
class ActiveRecord::Migration::Compatibility::V5_1 < ActiveRecord::Migration::Compatibility::V5_2
end
class ActiveRecord::Migration::Compatibility::V5_0 < ActiveRecord::Migration::Compatibility::V5_1
end
module ActiveRecord::Migration::Compatibility::V5_0::TableDefinition
end
class ActiveRecord::Migration::Compatibility::V4_2 < ActiveRecord::Migration::Compatibility::V5_0
end
module ActiveRecord::Migration::Compatibility::V4_2::TableDefinition
end
class ActiveRecord::ConnectionAdapters::TransactionState
end
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter
end
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter::InstrumentationNotStartedError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ConnectionAdapters::TransactionInstrumenter::InstrumentationAlreadyStartedError < ActiveRecord::ActiveRecordError
end
class ActiveRecord::ConnectionAdapters::NullTransaction
end
class ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::RestartParentTransaction < ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::SavepointTransaction < ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::RealTransaction < ActiveRecord::ConnectionAdapters::Transaction
end
class ActiveRecord::ConnectionAdapters::TransactionManager
end
class ActiveRecord::InternalMetadata
end
class ActiveRecord::InternalMetadata::NullInternalMetadata
end
class ActiveRecord::FutureResult
end
class ActiveRecord::FutureResult::Complete
end
class ActiveRecord::FutureResult::EventBuffer
end
class ActiveRecord::FutureResult::Canceled < ActiveRecord::ActiveRecordError
end
class ActiveRecord::FutureResult::SelectAll < ActiveRecord::FutureResult
end
class ActiveRecord::Result
  include Enumerable
end
class ActiveRecord::SchemaMigration
end
class ActiveRecord::SchemaMigration::NullSchemaMigration
end
module ActiveRecord::TestDatabases
end
module ActiveRecord::TestFixtures
  extend ActiveSupport::Concern
end
module ActiveRecord::TestFixtures::ClassMethods
end
class ActiveRecord::FixtureSet
  extend GlobalID::FixtureSet
end
class ActiveRecord::FixtureSet::File
  include Enumerable
end
class ActiveRecord::FixtureSet::RenderContext
end
class ActiveRecord::FixtureSet::TableRow
end
class ActiveRecord::FixtureSet::TableRow::ReflectionProxy
end
class ActiveRecord::FixtureSet::TableRow::HasManyThroughProxy < ActiveRecord::FixtureSet::TableRow::ReflectionProxy
end
class ActiveRecord::FixtureSet::TableRow::PrimaryKeyError < StandardError
end
class ActiveRecord::FixtureSet::ModelMetadata
end
class ActiveRecord::FixtureSet::TableRows
end
class ActiveRecord::FixtureClassNotFound < ActiveRecord::ActiveRecordError
end
class ActiveRecord::Fixture
  include Enumerable
end
class ActiveRecord::Fixture::FixtureError < StandardError
end
class ActiveRecord::Fixture::FormatError < ActiveRecord::Fixture::FixtureError
end
