# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `opentelemetry-instrumentation-resque` gem.
# Please instead update this file by running `bin/tapioca gem opentelemetry-instrumentation-resque`.

# OpenTelemetry is an open source observability framework, providing a
# general-purpose API, SDK, and related tools required for the instrumentation
# of cloud-native software, frameworks, and libraries.
#
# The OpenTelemetry module provides global accessors for telemetry objects.
# See the documentation for the `opentelemetry-api` gem for details.
#
# source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation.rb#13
module OpenTelemetry
  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#36
  def error_handler; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def error_handler=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#44
  def handle_error(exception: T.unsafe(nil), message: T.unsafe(nil)); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#30
  def logger; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def logger=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#69
  def propagation; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#27
  def propagation=(_arg0); end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#64
  def tracer_provider; end

  # source://opentelemetry-api/1.2.5/lib/opentelemetry.rb#52
  def tracer_provider=(provider); end
end

# Instrumentation should be able to handle the case when the library is not installed on a user's system.
#
# source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation.rb#15
module OpenTelemetry::Instrumentation
  # source://opentelemetry-registry/0.3.0/lib/opentelemetry/instrumentation.rb#21
  def registry; end
end

# The {OpenTelemetry::Instrumentation::Resque::Instrumentation} class contains logic to detect and install the Resque instrumentation
#
# Installation and configuration of this instrumentation is done within the
# {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry/SDK#configure-instance_method OpenTelemetry::SDK#configure}
# block, calling {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use use()}
# or {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use_all use_all()}.
#
# ## Configuration keys and options
#
# ### `:span_naming`
#
# Specifies how the span names are set. Can be one of:
#
# - `:queue` **(default)** - The job span name will appear as '<destination / queue name> <operation>',
#   for example `default process`.
# - `:job_class` - The job span name will appear as '<job class name> <operation>',
#   for example `SimpleJob process`.
#
# ### `:propagation_style`
#
# Specifies how the job's execution is traced and related to the trace where the job was enqueued.
#
# - `:link` **(default)** - The job will be represented by a separate trace from the span that enqueued the job.
#     - The initial span of the job trace will be associated with the span that enqueued the job, via a
#       {https://opentelemetry.io/docs/concepts/signals/traces/#span-links Span Link}.
# - `:child` - The job will be represented within the same logical trace, as a direct
#   child of the span that enqueued the job.
# - `:none` - The job will be represented by a separate trace from the span that enqueued the job.
#   There will be no explicit relationship between the job trace and the trace containing the span that
#   enqueued the job.
#
# ### `:force_flush`
#
# Specifies whether spans are forcibly flushed (exported out of process) upon every job completion.
#
#   - `:ask_the_job` **(default)** - Synchronously flush completed spans when a job completes if workers are
#     forked for each job.
#       - Determined by checking if {https://www.rubydoc.info/gems/resque/Resque%2FWorker:fork_per_job%3F Resque::Worker#fork_per_job?}
#         is true. Spans must be flushed and exported before a worker process terminates or no telemetry will be sent.
#   - `:always` - All completed spans will be synchronously flushed at the end of a job's execution.
#   - `:never` - Job completion will not affect the export of spans out of worker processes.
#       - Selecting this option will result in spans being lost if the worker process ends before
#         the spans are flushed. You might select this option if you wish to coordinate the timing for flushing
#         completed spans yourself.
#
# @example An explicit default configuration
#   OpenTelemetry::SDK.configure do |c|
#   c.use_all({
#   'OpenTelemetry::Instrumentation::Resque' => {
#   span_naming: :queue,
#   propagation_style: :link
#   force_flush: :ask_the_job,
#   },
#   })
#   end
#
# source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation/resque.rb#13
module OpenTelemetry::Instrumentation::Resque; end

# The {OpenTelemetry::Instrumentation::Resque::Instrumentation} class contains logic to detect and install the Resque instrumentation
#
# Installation and configuration of this instrumentation is done within the
# {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry/SDK#configure-instance_method OpenTelemetry::SDK#configure}
# block, calling {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use use()}
# or {https://www.rubydoc.info/gems/opentelemetry-sdk/OpenTelemetry%2FSDK%2FConfigurator:use_all use_all()}.
#
# ## Configuration keys and options
#
# ### `:span_naming`
#
# Specifies how the span names are set. Can be one of:
#
# - `:queue` **(default)** - The job span name will appear as '<destination / queue name> <operation>',
#   for example `default process`.
# - `:job_class` - The job span name will appear as '<job class name> <operation>',
#   for example `SimpleJob process`.
#
# ### `:propagation_style`
#
# Specifies how the job's execution is traced and related to the trace where the job was enqueued.
#
# - `:link` **(default)** - The job will be represented by a separate trace from the span that enqueued the job.
#     - The initial span of the job trace will be associated with the span that enqueued the job, via a
#       {https://opentelemetry.io/docs/concepts/signals/traces/#span-links Span Link}.
# - `:child` - The job will be represented within the same logical trace, as a direct
#   child of the span that enqueued the job.
# - `:none` - The job will be represented by a separate trace from the span that enqueued the job.
#   There will be no explicit relationship between the job trace and the trace containing the span that
#   enqueued the job.
#
# ### `:force_flush`
#
# Specifies whether spans are forcibly flushed (exported out of process) upon every job completion.
#
#   - `:ask_the_job` **(default)** - Synchronously flush completed spans when a job completes if workers are
#     forked for each job.
#       - Determined by checking if {https://www.rubydoc.info/gems/resque/Resque%2FWorker:fork_per_job%3F Resque::Worker#fork_per_job?}
#         is true. Spans must be flushed and exported before a worker process terminates or no telemetry will be sent.
#   - `:always` - All completed spans will be synchronously flushed at the end of a job's execution.
#   - `:never` - Job completion will not affect the export of spans out of worker processes.
#       - Selecting this option will result in spans being lost if the worker process ends before
#         the spans are flushed. You might select this option if you wish to coordinate the timing for flushing
#         completed spans yourself.
#
# @example An explicit default configuration
#   OpenTelemetry::SDK.configure do |c|
#   c.use_all({
#   'OpenTelemetry::Instrumentation::Resque' => {
#   span_naming: :queue,
#   propagation_style: :link
#   force_flush: :ask_the_job,
#   },
#   })
#   end
#
# source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation/resque/instrumentation.rb#65
class OpenTelemetry::Instrumentation::Resque::Instrumentation < ::OpenTelemetry::Instrumentation::Base
  private

  # source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation/resque/instrumentation.rb#81
  def patch; end

  # source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation/resque/instrumentation.rb#86
  def require_dependencies; end
end

# source://opentelemetry-instrumentation-resque//lib/opentelemetry/instrumentation/resque/version.rb#10
OpenTelemetry::Instrumentation::Resque::VERSION = T.let(T.unsafe(nil), String)
