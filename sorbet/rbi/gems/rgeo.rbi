# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rgeo/all/rgeo.rbi
#
# rgeo-3.0.1

module RGeo
end
module RGeo::Error
end
class RGeo::Error::RGeoError < RuntimeError
end
class RGeo::Error::GeosError < RGeo::Error::RGeoError
end
class RGeo::Error::InvalidGeometry < RGeo::Error::RGeoError
end
class RGeo::Error::UnsupportedOperation < RGeo::Error::RGeoError
end
class RGeo::Error::ParseError < RGeo::Error::RGeoError
end
module RGeo::Feature
  def self.cast(obj, *params); end
end
module RGeo::Feature::Factory
  def collection(_elems); end
  def coord_sys; end
  def line(_start, _stop); end
  def line_string(_points); end
  def linear_ring(_points); end
  def multi_line_string(_elems); end
  def multi_point(_elems); end
  def multi_polygon(_elems); end
  def override_cast(_original, _type, _flags); end
  def parse_wkb(_str); end
  def parse_wkt(_str); end
  def point(_x, _y, *_extra); end
  def polygon(_outer_ring, _inner_rings = nil); end
  def property(_name); end
end
module RGeo::Feature::Factory::Instance
end
module RGeo::Feature::Instance
end
module RGeo::Feature::Type
  def ===(rhs); end
  def add_subtype(type); end
  def check_type(rhs); end
  def each_immediate_subtype(&block); end
  def self.extended(type); end
  def subtype_of?(type); end
  def supertype; end
  def to_s; end
  def type_name; end
end
module RGeo::Feature::Geometry
  def *(other); end
  def +(other); end
  def -(other); end
  def ==(other); end
  def as_binary; end
  def as_text; end
  def boundary; end
  def buffer(_distance_); end
  def contains?(_another_geometry); end
  def convex_hull; end
  def coordinate_dimension; end
  def crosses?(_another_geometry); end
  def difference(_another_geometry); end
  def dimension; end
  def disjoint?(_another_geometry); end
  def distance(_another_geometry); end
  def empty?; end
  def envelope; end
  def eql?(other); end
  def equals?(_another_geometry); end
  def factory; end
  def geometry_type; end
  def intersection(_another_geometry); end
  def intersects?(_another_geometry); end
  def is_3d?; end
  def locate_along; end
  def locate_between; end
  def measured?; end
  def overlaps?(_another_geometry); end
  def relate?(_another_geometry, _intersection_pattern_matrix_); end
  def rep_equals?(_another_geometry); end
  def simple?; end
  def spatial_dimension; end
  def srid; end
  def sym_difference(_another_geometry); end
  def touches?(_another_geometry); end
  def transform(other_factory); end
  def unary_union; end
  def union(_another_geometry); end
  def within?(_another_geometry); end
  extend RGeo::Feature::Type
end
module RGeo::Feature::Point
  def m; end
  def x; end
  def y; end
  def z; end
  extend RGeo::Feature::Type
  include RGeo::Feature::Geometry
end
module RGeo::Feature::Curve
  def closed?; end
  def end_point; end
  def length; end
  def ring?; end
  def start_point; end
  extend RGeo::Feature::Type
  include RGeo::Feature::Geometry
end
module RGeo::Feature::LineString
  def num_points; end
  def point_n(_idx); end
  def points; end
  extend RGeo::Feature::Type
  include RGeo::Feature::Curve
end
module RGeo::Feature::LinearRing
  def ccw?; end
  extend RGeo::Feature::Type
  include RGeo::Feature::LineString
end
module RGeo::Feature::Line
  extend RGeo::Feature::Type
  include RGeo::Feature::LineString
end
module RGeo::Feature::Surface
  def area; end
  def centroid; end
  def point_on_surface; end
  extend RGeo::Feature::Type
  include RGeo::Feature::Geometry
end
module RGeo::Feature::Polygon
  def exterior_ring; end
  def interior_ring_n(_idx); end
  def interior_rings; end
  def num_interior_rings; end
  extend RGeo::Feature::Type
  include RGeo::Feature::Surface
end
module RGeo::Feature::GeometryCollection
  def [](_idx); end
  def each(&_block); end
  def geometry_n(_idx); end
  def node; end
  def num_geometries; end
  def point_on_surface; end
  def size; end
  extend RGeo::Feature::Type
  include Enumerable
  include RGeo::Feature::Geometry
end
module RGeo::Feature::MultiPoint
  extend RGeo::Feature::Type
  include RGeo::Feature::GeometryCollection
end
module RGeo::Feature::MultiCurve
  def closed?; end
  def length; end
  extend RGeo::Feature::Type
  include RGeo::Feature::GeometryCollection
end
module RGeo::Feature::MultiLineString
  extend RGeo::Feature::Type
  include RGeo::Feature::MultiCurve
end
module RGeo::Feature::MultiSurface
  def area; end
  def centroid; end
  def point_on_surface; end
  extend RGeo::Feature::Type
  include RGeo::Feature::GeometryCollection
end
module RGeo::Feature::MultiPolygon
  extend RGeo::Feature::Type
  include RGeo::Feature::MultiSurface
end
module RGeo::Feature::FactoryGenerator
  def call(_config = nil); end
  def self.decorate(delegate, default_config = nil, force_config = nil); end
  def self.single(factory); end
end
module RGeo::CoordSys
end
module RGeo::CoordSys::CS
  def self.create_from_wkt(str); end
end
class RGeo::CoordSys::CS::CoordinateSystemFactory
  def create_compound_coordinate_system(name, head, tail); end
  def create_ellipsoid(name, semi_major_axis, semi_minor_axis, linear_unit); end
  def create_flattened_sphere(name, semi_major_axis, inverse_flattening, linear_unit); end
  def create_from_wkt(str); end
  def create_geographic_coordinate_system(name, angular_unit, horizontal_datum, prime_meridian, axis0, axis1); end
  def create_horizontal_datum(name, horizontal_datum_type, ellipsoid, to_wgs84); end
  def create_local_coordinate_system(name, datum, unit, axes); end
  def create_local_datum(_name, local_datum_type); end
  def create_prime_meridian(_name, angular_unit, longitude); end
  def create_projected_coordinate_system(name, gcs, projection, linear_unit, axis0, axis1); end
  def create_projection(name, wkt_projection_class, parameters); end
  def create_vertical_coordinate_system(name, vertical_datum, vertical_unit, axis); end
  def create_vertical_datum(name, vertical_datum_type); end
end
class RGeo::CoordSys::CS::Base
  def ==(other); end
  def brackets(standard); end
  def encode_with(coder); end
  def eql?(other); end
  def hash; end
  def init_with(coder); end
  def inspect; end
  def marshal_dump; end
  def marshal_load(data); end
  def self.new(*arg0, **); end
  def to_s; end
  def to_wkt(standard_brackets: nil); end
end
class RGeo::CoordSys::CS::AxisInfo < RGeo::CoordSys::CS::Base
  def initialize(name, orientation); end
  def name; end
  def orientation; end
  def self.create(name, orientation); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::ProjectionParameter < RGeo::CoordSys::CS::Base
  def initialize(name, value); end
  def name; end
  def self.create(name, value); end
  def value; end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::WGS84ConversionInfo < RGeo::CoordSys::CS::Base
  def dx; end
  def dy; end
  def dz; end
  def ex; end
  def ey; end
  def ez; end
  def initialize(dx_meters, dy_meters, dz_meters, ex_arc_seconds, ey_arc_seconds, ez_arc_seconds, ppm); end
  def ppm; end
  def self.create(dx_meters, dy_meters, dz_meters, ex_arc_seconds, ey_arc_seconds, ez_arc_seconds, ppm); end
  def to_wkt(standard_brackets: nil); end
end
class RGeo::CoordSys::CS::Info < RGeo::CoordSys::CS::Base
  def abbreviation; end
  def alias; end
  def authority; end
  def authority_code; end
  def extension(key); end
  def initialize(name, authority = nil, authority_code = nil, abbreviation = nil, init_alias = nil, remarks = nil, extensions = nil); end
  def name; end
  def remarks; end
end
class RGeo::CoordSys::CS::Unit < RGeo::CoordSys::CS::Info
  def conversion_factor; end
  def initialize(name, conversion_factor, *optional); end
  def self.create(name, conversion_factor, *optional); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::LinearUnit < RGeo::CoordSys::CS::Unit
  def meters_per_unit; end
  def self.create(name, meters_per_unit, *optional); end
end
class RGeo::CoordSys::CS::AngularUnit < RGeo::CoordSys::CS::Unit
  def radians_per_unit; end
  def self.create(name, radians_per_unit, *optional); end
end
class RGeo::CoordSys::CS::PrimeMeridian < RGeo::CoordSys::CS::Info
  def angular_unit; end
  def initialize(name, angular_unit, longitude, *optional); end
  def longitude; end
  def self.create(name, angular_unit, longitude, *optional); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::Ellipsoid < RGeo::CoordSys::CS::Info
  def axisunit; end
  def initialize(name, semi_major_axis, semi_minor_axis, inverse_flattening, ivf_definitive, linear_unit, *optional); end
  def inverse_flattening; end
  def ivf_definitive; end
  def self.create(name, semi_major_axis, semi_minor_axis, inverse_flattening, ivf_definitive, linear_unit, *optional); end
  def self.create_ellipsoid(name, semi_major_axis, semi_minor_axis, linear_unit, *optional); end
  def self.create_flattened_sphere(name, semi_major_axis, inverse_flattening, linear_unit, *optional); end
  def semi_major_axis; end
  def semi_minor_axis; end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::Datum < RGeo::CoordSys::CS::Info
  def datum_type; end
  def initialize(name, datum_type, *optional); end
  def wkt_content(_); end
end
class RGeo::CoordSys::CS::VerticalDatum < RGeo::CoordSys::CS::Datum
  def self.create(name, datum_type, *optional); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::LocalDatum < RGeo::CoordSys::CS::Datum
  def self.create(name, datum_type, *optional); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::HorizontalDatum < RGeo::CoordSys::CS::Datum
  def ellipsoid; end
  def initialize(name, datum_type, ellipsoid, wgs84_parameters, *optional); end
  def self.create(name, datum_type, ellipsoid, wgs84_parameters, *optional); end
  def wgs84_parameters; end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::Projection < RGeo::CoordSys::CS::Info
  def class_name; end
  def each_parameter(&block); end
  def get_parameter(index); end
  def initialize(name, class_name, parameters, *optional); end
  def num_parameters; end
  def self.create(name, class_name, parameters, *optional); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::CoordinateSystem < RGeo::CoordSys::CS::Info
  def dimension; end
  def geographic?; end
  def get_axis(_dimension); end
  def get_units(_dimension); end
  def initialize(name, dimension, *optional); end
  def projected?; end
  def self.create(defn, dimension = nil, *optional); end
  def self.create_from_wkt(str); end
  def transform_coords(target_cs, x, y, z = nil); end
  def wkt_content(_); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::CompoundCoordinateSystem < RGeo::CoordSys::CS::CoordinateSystem
  def get_axis(index); end
  def get_units(index); end
  def head; end
  def initialize(name, head, tail, *optional); end
  def self.create(name, head, tail, *optional); end
  def tail; end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::LocalCoordinateSystem < RGeo::CoordSys::CS::CoordinateSystem
  def get_axis(index); end
  def get_units(_index); end
  def initialize(name, local_datum, unit, axes, *optional); end
  def local_datum; end
  def self.create(name, local_datum, unit, axes, *optional); end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::GeocentricCoordinateSystem < RGeo::CoordSys::CS::CoordinateSystem
  def geographic?; end
  def get_axis(index); end
  def get_units(_index); end
  def horizontal_datum; end
  def initialize(name, horizontal_datum, prime_meridian, linear_unit, axis0, axis1, axis2, *optional); end
  def linear_unit; end
  def prime_meridian; end
  def self.create(name, horizontal_datum, prime_meridian, linear_unit, axis0, axis1, axis2, *optional); end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::VerticalCoordinateSystem < RGeo::CoordSys::CS::CoordinateSystem
  def get_axis(_index); end
  def get_units(_index); end
  def initialize(name, vertical_datum, vertical_unit, axis, *optional); end
  def self.create(name, vertical_datum, vertical_unit, axis, *optional); end
  def vertical_datum; end
  def vertical_unit; end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::HorizontalCoordinateSystem < RGeo::CoordSys::CS::CoordinateSystem
  def horizontal_datum; end
  def initialize(name, horizontal_datum, *optional); end
end
class RGeo::CoordSys::CS::GeographicCoordinateSystem < RGeo::CoordSys::CS::HorizontalCoordinateSystem
  def angular_unit; end
  def geographic?; end
  def get_axis(index); end
  def get_units(_index); end
  def get_wgs84_conversion_info(_index); end
  def initialize(name, angular_unit, horizontal_datum, prime_meridian, axis0, axis1, *optional); end
  def num_conversion_to_wgs84; end
  def prime_meridian; end
  def self.create(name, angular_unit, horizontal_datum, prime_meridian, axis0, axis1, *optional); end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::ProjectedCoordinateSystem < RGeo::CoordSys::CS::HorizontalCoordinateSystem
  def geographic_coordinate_system; end
  def get_axis(index); end
  def get_units(_index); end
  def initialize(name, geographic_coordinate_system, projection, linear_unit, axis0, axis1, *optional); end
  def linear_unit; end
  def projected?; end
  def projection; end
  def self.create(name, geographic_coordinate_system, projection, linear_unit, axis0, axis1, *optional); end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::CoordinateTransform < RGeo::CoordSys::CS::Info
  def area_of_use; end
  def codomain_convex_hull(points); end
  def dim_source; end
  def dim_target; end
  def domain_flags(points); end
  def identity?; end
  def initialize(source_cs, target_cs, *optional); end
  def inspect; end
  def inverse; end
  def self.create(source_cs, target_cs, *optional); end
  def source_cs; end
  def source_cs=(arg0); end
  def target_cs; end
  def target_cs=(arg0); end
  def transform_coords(x, y, z = nil); end
  def transform_list(points); end
  def transform_type; end
  def wkt_content(standard_brackets); end
  def wkt_typename; end
end
class RGeo::CoordSys::CS::WKTParser
  def consume_tokentype(type); end
  def cur_token; end
  def expect_tokentype(type); end
  def initialize(str); end
  def next_token; end
  def parse(containing_type = nil); end
end
class RGeo::CoordSys::CS::WKTParser::QuotedString < String
end
class RGeo::CoordSys::CS::WKTParser::TypeString < String
end
class RGeo::CoordSys::CS::WKTParser::AuthorityClause
  def initialize(name, code); end
  def to_a; end
end
class RGeo::CoordSys::CS::WKTParser::ExtensionClause
  def initialize(key, value); end
  def key; end
  def value; end
end
class RGeo::CoordSys::CS::WKTParser::ArgumentList
  def <<(value); end
  def assert_empty; end
  def create_optionals; end
  def find_all(klass); end
  def find_first(klass); end
  def initialize; end
  def shift(klass = nil); end
end
module RGeo::ImplHelper
end
module RGeo::ImplHelper::Utils
  def self.setup_coord_sys(srid, coord_sys, coord_sys_class); end
  def symbolize_hash(hash); end
end
module RGeo::ImplHelper::Math
end
module RGeo::ImplHelper::BasicGeometryMethods
  def as_binary; end
  def as_text; end
  def copy_state_from(obj); end
  def encode_with(coder); end
  def factory; end
  def factory=(arg0); end
  def init_geometry; end
  def init_with(coder); end
  def inspect; end
  def marshal_dump; end
  def marshal_load(data); end
  def to_s; end
  include RGeo::Feature::Instance
end
module RGeo::ImplHelper::BasicGeometryCollectionMethods
  def [](idx); end
  def copy_state_from(obj); end
  def dimension; end
  def each(&block); end
  def elements; end
  def empty?; end
  def geometries; end
  def geometry_n(idx); end
  def geometry_type; end
  def hash; end
  def initialize(factory, elements); end
  def num_geometries; end
  def rep_equals?(rhs); end
  include Enumerable
end
module RGeo::ImplHelper::BasicMultiLineStringMethods
  def add_boundary(hash, point); end
  def boundary; end
  def closed?; end
  def contains?(rhs); end
  def coordinates; end
  def geometry_type; end
  def initialize(factory, elements); end
  def length; end
end
module RGeo::ImplHelper::BasicMultiPointMethods
  def boundary; end
  def coordinates; end
  def geometry_type; end
  def initialize(factory, elements); end
end
module RGeo::ImplHelper::BasicMultiPolygonMethods
  def area; end
  def boundary; end
  def contains?(rhs); end
  def coordinates; end
  def geometry_type; end
  def initialize(factory, elements); end
end
module RGeo::ImplHelper::BasicPointMethods
  def boundary; end
  def convex_hull; end
  def coordinates; end
  def copy_state_from(obj); end
  def dimension; end
  def empty?; end
  def envelope; end
  def equals?(rhs); end
  def geometry_type; end
  def hash; end
  def initialize(factory, x, y, *extra); end
  def m; end
  def rep_equals?(rhs); end
  def simple?; end
  def x; end
  def y; end
  def z; end
end
module RGeo::ImplHelper::BasicLineStringMethods
  def between_coordinate?(coord, start_coord, end_coord); end
  def boundary; end
  def closed?; end
  def contains?(rhs); end
  def contains_point?(point); end
  def coordinates; end
  def copy_state_from(obj); end
  def dimension; end
  def empty?; end
  def end_point; end
  def geometry_type; end
  def hash; end
  def initialize(factory, points); end
  def num_points; end
  def point_collinear?(pt1, pt2, pt3); end
  def point_intersect_segment?(point, start_point, end_point); end
  def point_n(idx); end
  def points; end
  def rep_equals?(rhs); end
  def ring?; end
  def start_point; end
end
module RGeo::ImplHelper::BasicLineMethods
  def coordinates; end
  def geometry_type; end
  def initialize(factory, start, stop); end
end
module RGeo::ImplHelper::BasicLinearRingMethods
  def ccw?; end
  def geometry_type; end
  def init_geometry; end
  def initialize(factory, points); end
end
module RGeo::ImplHelper::BasicPolygonMethods
  def boundary; end
  def contains?(rhs); end
  def contains_point?(point); end
  def coordinates; end
  def copy_state_from(obj); end
  def dimension; end
  def empty?; end
  def exterior_ring; end
  def geometry_type; end
  def hash; end
  def initialize(factory, exterior_ring, interior_rings); end
  def interior_ring_n(idx); end
  def interior_rings; end
  def num_interior_rings; end
  def rep_equals?(rhs); end
  def ring_encloses_point?(ring, point, on_border_return: nil); end
end
module RGeo::ImplHelper::ValidOp
  def check_valid; end
  def check_valid_geometry_collection; end
  def check_valid_line_string; end
  def check_valid_linear_ring; end
  def check_valid_multi_point; end
  def check_valid_multi_polygon; end
  def check_valid_point; end
  def check_valid_polygon; end
  def invalid_reason; end
  def valid?; end
  def validity_helper; end
end
module RGeo::ImplHelper::ValidOpHelpers
  def check_connected_interiors(poly); end
  def check_consistent_area(poly); end
  def check_consistent_area_mp(mpoly); end
  def check_holes_in_shell(poly); end
  def check_holes_not_nested(poly); end
  def check_invalid_coordinate(point); end
  def check_no_self_intersecting_rings(poly); end
  def check_no_self_intersections(ring); end
  def check_shells_not_nested(mpoly); end
  def self.check_connected_interiors(poly); end
  def self.check_consistent_area(poly); end
  def self.check_consistent_area_mp(mpoly); end
  def self.check_holes_in_shell(poly); end
  def self.check_holes_not_nested(poly); end
  def self.check_invalid_coordinate(point); end
  def self.check_no_self_intersecting_rings(poly); end
  def self.check_no_self_intersections(ring); end
  def self.check_shells_not_nested(mpoly); end
end
module RGeo::WKRep
end
class RGeo::WKRep::WKTParser
  def check_factory_support; end
  def clean_scanner; end
  def ensure_factory; end
  def exact_factory; end
  def expect_token_type(type); end
  def factory_generator; end
  def ignore_extra_tokens?; end
  def initialize(factory_generator = nil, opts = nil); end
  def next_token; end
  def parse(str); end
  def parse_coords; end
  def parse_geometry_collection; end
  def parse_line_string; end
  def parse_multi_line_string; end
  def parse_multi_point; end
  def parse_multi_polygon; end
  def parse_point(convert_empty: nil); end
  def parse_polygon; end
  def parse_type_tag; end
  def properties; end
  def start_scanner(str); end
  def strict_wkt11?; end
  def support_ewkt?; end
  def support_wkt12?; end
end
class RGeo::WKRep::WKTGenerator
  def convert_case; end
  def emit_ewkt_srid?; end
  def generate(obj); end
  def generate_coords(obj, support_z, support_m); end
  def generate_feature(obj, support_z, support_m, toplevel: nil); end
  def generate_geometry_collection(obj, support_z, support_m); end
  def generate_line_string(obj, support_z, support_m); end
  def generate_multi_line_string(obj, support_z, support_m); end
  def generate_multi_point(obj, support_z, support_m); end
  def generate_multi_polygon(obj, support_z, support_m); end
  def generate_point(obj, support_z, support_m); end
  def generate_polygon(obj, support_z, support_m); end
  def initialize(opts = nil); end
  def properties; end
  def square_brackets?; end
  def tag_format; end
  def type_format; end
end
class RGeo::WKRep::WKBParser
  def byte; end
  def bytes_remaining; end
  def exact_factory; end
  def factory_generator; end
  def get_doubles(little_endian, count); end
  def get_integer(little_endian); end
  def ignore_extra_bytes?; end
  def initialize(factory_generator = nil, opts = nil); end
  def parse(data); end
  def parse_hex(data); end
  def parse_line_string(little_endian); end
  def parse_object(contained); end
  def properties; end
  def start_scanner(data); end
  def support_ewkb?; end
  def support_wkb12?; end
end
class RGeo::WKRep::WKBGenerator
  def emit_byte(value, rval); end
  def emit_doubles(array, rval); end
  def emit_ewkb_srid?; end
  def emit_integer(value, rval); end
  def emit_line_string_coords(obj, rval); end
  def generate(obj); end
  def generate_feature(obj, rval, toplevel: nil); end
  def hex_format?; end
  def initialize(opts = nil); end
  def little_endian?; end
  def point_coords(obj, rval, array = nil); end
  def properties; end
  def type_format; end
end
class RGeo::WKRep::WKBGenerator::Result
  def <<(data); end
  def emit(hex_format); end
  def initialize(has_z, has_m); end
  def m?; end
  def z?; end
end
module RGeo::Geos
  def self.capi_geos?(object); end
  def self.capi_supported?; end
  def self.factory(opts = nil); end
  def self.ffi_geos?(object); end
  def self.ffi_supported?; end
  def self.geos?(object); end
  def self.preferred_native_interface; end
  def self.preferred_native_interface=(arg0); end
  def self.supported?; end
  def self.version; end
end
module RGeo::Geos::Utils
  def self.ffi_compute_dimension(geom); end
  def self.ffi_coord_seq_hash(coord_seq, init_hash = nil); end
  def self.ffi_coord_seqs_equal?(cs1, cs2, check_z); end
  def self.ffi_supports_prepared_level1; end
  def self.ffi_supports_prepared_level2; end
  def self.ffi_supports_set_output_dimension; end
  def self.ffi_supports_unary_union; end
  def self.marshal_wkb_generator; end
  def self.psych_wkt_generator; end
end
class RGeo::Geos::CAPIFactory
  def ==(other); end
  def _buffer_resolution; end
  def _coord_sys; end
  def _create(arg0, arg1, arg2, arg3, arg4, arg5); end
  def _flags; end
  def _geos_version; end
  def _parse_wkb_impl(arg0); end
  def _parse_wkt_impl(arg0); end
  def _set_wkrep_parsers(arg0, arg1); end
  def _srid; end
  def _supports_unary_union?; end
  def _wkb_generator; end
  def _wkb_parser; end
  def _wkt_generator; end
  def _wkt_parser; end
  def auto_prepare; end
  def buffer_resolution; end
  def collection(elems_); end
  def coord_sys; end
  def encode_with(coder_); end
  def eql?(other); end
  def hash; end
  def init_with(coder_); end
  def initialize_copy(arg0); end
  def inspect; end
  def line(start_, end_); end
  def line_string(points_); end
  def linear_ring(points_); end
  def marshal_dump; end
  def marshal_load(data_); end
  def multi_line_string(elems_); end
  def multi_point(elems_); end
  def multi_polygon(elems_); end
  def override_cast(original, ntype, flags); end
  def parse_wkb(str_); end
  def parse_wkt(str_); end
  def point(x, y, *extra); end
  def polygon(outer_ring_, inner_rings_ = nil); end
  def prepare_heuristic?; end
  def property(name_); end
  def read_for_marshal(arg0); end
  def read_for_psych(arg0); end
  def self._create(arg0, arg1, arg2, arg3, arg4, arg5); end
  def self._geos_version; end
  def self._supports_unary_union?; end
  def self.create(opts = nil); end
  def self.new(opts = nil); end
  def srid; end
  def supports_m?; end
  def supports_z?; end
  def supports_z_or_m?; end
  def write_for_marshal(arg0); end
  def write_for_psych(arg0); end
  include RGeo::Feature::Factory::Instance
  include RGeo::ImplHelper::Utils
end
module RGeo::Geos::CAPIGeometryMethods
  def *(arg0); end
  def +(arg0); end
  def -(arg0); end
  def ==(arg0); end
  def _as_text; end
  def _steal(arg0); end
  def as_binary; end
  def as_text; end
  def boundary; end
  def buffer(arg0); end
  def buffer_with_style(arg0, arg1, arg2, arg3); end
  def contains?(arg0); end
  def convex_hull; end
  def coordinate_dimension; end
  def crosses?(arg0); end
  def difference(arg0); end
  def dimension; end
  def disjoint?(arg0); end
  def distance(arg0); end
  def empty?; end
  def encode_with(coder); end
  def envelope; end
  def eql?(arg0); end
  def equals?(arg0); end
  def factory; end
  def factory=(arg0); end
  def geometry_type; end
  def init_with(coder); end
  def initialize_copy(arg0); end
  def initialized?; end
  def inspect; end
  def intersection(arg0); end
  def intersects?(arg0); end
  def invalid_reason; end
  def invalid_reason_location; end
  def is_3d?; end
  def make_valid; end
  def marshal_dump; end
  def marshal_load(data_); end
  def measured?; end
  def overlaps?(arg0); end
  def point_on_surface; end
  def polygonize; end
  def prepare!; end
  def prepared?; end
  def relate?(arg0, arg1); end
  def rep_equals?(arg0); end
  def segmentize(arg0); end
  def simple?; end
  def simplify(arg0); end
  def simplify_preserve_topology(arg0); end
  def spatial_dimension; end
  def srid; end
  def sym_difference(arg0); end
  def to_s; end
  def touches?(arg0); end
  def unary_union; end
  def union(arg0); end
  def valid?; end
  def within?(arg0); end
  include RGeo::Feature::Instance
end
class RGeo::Geos::CAPIPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1, arg2, arg3); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1, arg2, arg3); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::Point
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPIPointMethods
  include RGeo::ImplHelper::ValidityCheck
end
module RGeo::Geos::CAPIPointMethods
  def coordinates; end
  def eql?(arg0); end
  def geometry_type; end
  def hash; end
  def m; end
  def rep_equals?(arg0); end
  def x; end
  def y; end
  def z; end
end
class RGeo::Geos::CAPILineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def _copy_from(arg0, arg1); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def self._copy_from(arg0, arg1); end
  def self.create(arg0, arg1); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_length; end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_ring?; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::LineString
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPILineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geos::CAPILinearRingImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def _copy_from(arg0, arg1); end
  def boundary(*args); end
  def buffer(*args); end
  def ccw?(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def self._copy_from(arg0, arg1); end
  def self.create(arg0, arg1); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_ccw?; end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_length; end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_ring?; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::LinearRing
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPILineStringMethods
  include RGeo::Geos::CAPILinearRingMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geos::CAPILineImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def _copy_from(arg0, arg1); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1, arg2); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def self._copy_from(arg0, arg1); end
  def self.create(arg0, arg1, arg2); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_length; end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_ring?; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::Line
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPILineMethods
  include RGeo::Geos::CAPILineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
module RGeo::Geos::CAPILineStringMethods
  def closed?; end
  def coordinates; end
  def end_point; end
  def eql?(arg0); end
  def geometry_type; end
  def hash; end
  def interpolate_point(arg0); end
  def length; end
  def num_points; end
  def point_n(arg0); end
  def points; end
  def project_point(arg0); end
  def rep_equals?(arg0); end
  def ring?; end
  def start_point; end
end
module RGeo::Geos::CAPILinearRingMethods
  def geometry_type; end
  def hash; end
end
module RGeo::Geos::CAPILineMethods
  def geometry_type; end
  def hash; end
end
class RGeo::Geos::CAPIPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1, arg2); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def interior_ring_n(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1, arg2); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_centroid; end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_interior_ring_n(arg0); end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::Polygon
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPIPolygonMethods
  include RGeo::ImplHelper::ValidityCheck
end
module RGeo::Geos::CAPIPolygonMethods
  def area; end
  def centroid; end
  def coordinates; end
  def eql?(arg0); end
  def exterior_ring; end
  def geometry_type; end
  def hash; end
  def interior_ring_n(arg0); end
  def interior_rings; end
  def num_interior_rings; end
  def point_on_surface; end
  def rep_equals?(arg0); end
end
class RGeo::Geos::CAPIGeometryCollectionImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_node; end
  def unsafe_overlaps?(arg0); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_size; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::GeometryCollection
  include RGeo::Geos::CAPIGeometryCollectionMethods
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geos::CAPIMultiPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_node; end
  def unsafe_overlaps?(arg0); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_size; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::MultiPoint
  include RGeo::Geos::CAPIGeometryCollectionMethods
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPIMultiPointMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geos::CAPIMultiLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_length; end
  def unsafe_multiply(arg0); end
  def unsafe_node; end
  def unsafe_overlaps?(arg0); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_size; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::MultiLineString
  include RGeo::Geos::CAPIGeometryCollectionMethods
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPIMultiLineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geos::CAPIMultiPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def create(arg0, arg1); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def self.create(arg0, arg1); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_centroid; end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_node; end
  def unsafe_overlaps?(arg0); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_size; end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::MultiPolygon
  include RGeo::Geos::CAPIGeometryCollectionMethods
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::Geos::CAPIMultiPolygonMethods
  include RGeo::ImplHelper::ValidityCheck
end
module RGeo::Geos::CAPIGeometryCollectionMethods
  def [](arg0); end
  def each; end
  def eql?(arg0); end
  def geometry_n(arg0); end
  def geometry_type; end
  def hash; end
  def node; end
  def num_geometries; end
  def rep_equals?(arg0); end
  def size; end
  include Enumerable
end
module RGeo::Geos::CAPIMultiPointMethods
  def coordinates; end
  def geometry_type; end
  def hash; end
end
module RGeo::Geos::CAPIMultiLineStringMethods
  def closed?; end
  def coordinates; end
  def geometry_type; end
  def hash; end
  def length; end
end
module RGeo::Geos::CAPIMultiPolygonMethods
  def area; end
  def centroid; end
  def coordinates; end
  def geometry_type; end
  def hash; end
end
module RGeo::Geos::Analysis
  def self.ccw?(arg0); end
  def self.ccw_supported?; end
end
module RGeo::ImplHelper::ValidityCheck
  def check_validity!; end
  def invalid_reason; end
  def invalid_reason_memo; end
  def make_valid; end
  def self.classes; end
  def self.feature_methods(klass); end
  def self.included(klass); end
  def self.override(klass); end
  def self.override_classes; end
end
class RGeo::Geos::CAPIGeometryImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(arg0); end
  def unsafe_boundary; end
  def unsafe_buffer(arg0); end
  def unsafe_contains?(arg0); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(arg0); end
  def unsafe_difference(arg0); end
  def unsafe_disjoint?(arg0); end
  def unsafe_distance(arg0); end
  def unsafe_envelope; end
  def unsafe_intersection(arg0); end
  def unsafe_intersects?(arg0); end
  def unsafe_multiply(arg0); end
  def unsafe_overlaps?(arg0); end
  def unsafe_relate?(arg0, arg1); end
  def unsafe_remove(arg0); end
  def unsafe_sym_difference(arg0); end
  def unsafe_touches?(arg0); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(arg0); end
  def unsafe_within?(arg0); end
  def within?(*args); end
  include RGeo::Feature::Geometry
  include RGeo::Geos::CAPIGeometryMethods
  include RGeo::ImplHelper::ValidityCheck
end
module RGeo::Geos::ZMGeometryMethods
  def *(rhs); end
  def +(rhs); end
  def -(rhs); end
  def ==(rhs); end
  def as_binary; end
  def as_text; end
  def boundary; end
  def buffer(distance_); end
  def contains?(rhs); end
  def convex_hull; end
  def coordinate_dimension; end
  def copy_state_from(obj); end
  def crosses?(rhs); end
  def difference(rhs); end
  def dimension; end
  def disjoint?(rhs); end
  def distance(rhs); end
  def empty?; end
  def encode_with(coder); end
  def envelope; end
  def eql?(rhs); end
  def equals?(rhs); end
  def factory; end
  def geometry_type; end
  def hash; end
  def init_with(coder); end
  def initialize(factory, zgeometry, mgeometry); end
  def inspect; end
  def intersection(rhs); end
  def intersects?(rhs); end
  def is_3d?; end
  def m_geometry; end
  def marshal_dump; end
  def marshal_load(data); end
  def measured?; end
  def overlaps?(rhs); end
  def relate?(rhs, pattern); end
  def rep_equals?(rhs); end
  def simple?; end
  def spatial_dimension; end
  def srid; end
  def sym_difference(rhs); end
  def to_s; end
  def touches?(rhs); end
  def union(rhs); end
  def within?(rhs); end
  def z_geometry; end
  include RGeo::Feature::Instance
end
module RGeo::Geos::ZMPointMethods
  def coordinates; end
  def m; end
  def x; end
  def y; end
  def z; end
end
module RGeo::Geos::ZMLineStringMethods
  def closed?; end
  def coordinates; end
  def end_point; end
  def length; end
  def num_points; end
  def point_n(idx); end
  def points; end
  def ring?; end
  def start_point; end
end
module RGeo::Geos::ZMPolygonMethods
  def area; end
  def centroid; end
  def coordinates; end
  def exterior_ring; end
  def interior_ring_n(idx); end
  def interior_rings; end
  def num_interior_rings; end
  def point_on_surface; end
end
module RGeo::Geos::ZMGeometryCollectionMethods
  def [](idx); end
  def each; end
  def geometry_n(idx); end
  def num_geometries; end
  def size; end
  include Enumerable
end
module RGeo::Geos::ZMMultiLineStringMethods
  def closed?; end
  def coordinates; end
  def length; end
end
module RGeo::Geos::ZMMultiPolygonMethods
  def area; end
  def centroid; end
  def coordinates; end
  def point_on_surface; end
end
class RGeo::Geos::ZMPointImpl
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMPointMethods
end
class RGeo::Geos::ZMLineStringImpl
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMLineStringMethods
end
class RGeo::Geos::ZMLinearRingImpl
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMLineStringMethods
end
class RGeo::Geos::ZMLineImpl
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMLineStringMethods
end
class RGeo::Geos::ZMPolygonImpl
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMPolygonMethods
end
class RGeo::Geos::ZMGeometryCollectionImpl
  include RGeo::Geos::ZMGeometryCollectionMethods
  include RGeo::Geos::ZMGeometryMethods
end
class RGeo::Geos::ZMMultiPointImpl
  include RGeo::Geos::ZMGeometryCollectionMethods
  include RGeo::Geos::ZMGeometryMethods
end
class RGeo::Geos::ZMMultiLineStringImpl
  include RGeo::Geos::ZMGeometryCollectionMethods
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMMultiLineStringMethods
end
class RGeo::Geos::ZMMultiPolygonImpl
  include RGeo::Geos::ZMGeometryCollectionMethods
  include RGeo::Geos::ZMGeometryMethods
  include RGeo::Geos::ZMMultiPolygonMethods
end
class RGeo::Geos::ZMGeometryImpl
  include RGeo::Geos::ZMGeometryMethods
end
class RGeo::Geos::ZMFactory
  def ==(other); end
  def buffer_resolution; end
  def collection(elems); end
  def coord_sys; end
  def create_feature(klass, zgeometry, mgeometry); end
  def encode_with(coder); end
  def eql?(other); end
  def hash; end
  def init_with(coder); end
  def initialize(opts = nil); end
  def line(start, stop); end
  def line_string(points); end
  def linear_ring(points); end
  def m_factory; end
  def marshal_dump; end
  def marshal_load(data); end
  def marshal_wkb_generator; end
  def marshal_wkb_parser; end
  def multi_line_string(elems); end
  def multi_point(elems); end
  def multi_polygon(elems); end
  def override_cast(original, ntype, flags); end
  def parse_wkb(str); end
  def parse_wkt(str); end
  def point(x, y, z = nil, m = nil); end
  def polygon(outer_ring, inner_rings = nil); end
  def property(name); end
  def psych_wkt_generator; end
  def psych_wkt_parser; end
  def self.create(opts = nil); end
  def srid; end
  def z_factory; end
  include RGeo::Feature::Factory::Instance
  include RGeo::ImplHelper::Utils
end
module RGeo::Cartesian
  def self.factory(opts = nil); end
  def self.preferred_factory(opts = nil); end
  def self.simple_factory(opts = nil); end
end
class RGeo::Cartesian::Segment
  def ==(other); end
  def contains_point?(point); end
  def degenerate?; end
  def dx; end
  def dy; end
  def e; end
  def eql?(other); end
  def initialize(start, stop); end
  def intersects_segment?(seg); end
  def length; end
  def s; end
  def segment_intersection(seg); end
  def side(point); end
  def to_s; end
  def tproj(point); end
end
module RGeo::Cartesian::GeometryMethods
  def coordinate_dimension; end
  def envelope; end
  def graph; end
  def is_3d?; end
  def measured?; end
  def spatial_dimension; end
  def srid; end
end
module RGeo::Cartesian::PointMethods
  def buffer(distance); end
  def distance(rhs); end
end
module RGeo::Cartesian::LineStringMethods
  def crosses?(rhs); end
  def crosses_line_string?(rhs); end
  def length; end
  def segments; end
  def simple?; end
end
module RGeo::Cartesian::MultiLineStringMethods
  def length; end
end
module RGeo::Cartesian::ValidOp
  def validity_helper; end
  include RGeo::ImplHelper::ValidOp
end
module RGeo::Cartesian::ValidOpHelpers
  def check_connected_interiors(poly); end
  def check_consistent_area(poly); end
  def self.check_connected_interiors(poly); end
  def self.check_consistent_area(poly); end
  def self.check_consistent_area_mp(mpoly); end
  def self.check_holes_in_shell(poly); end
  def self.check_holes_not_nested(poly); end
  def self.check_invalid_coordinate(point); end
  def self.check_no_self_intersecting_rings(poly); end
  def self.check_no_self_intersections(ring); end
  def self.check_shells_not_nested(mpoly); end
  include RGeo::ImplHelper::ValidOpHelpers
end
class RGeo::Cartesian::PointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::PointMethods
  include RGeo::Feature::Point
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPointMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::LineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::LineStringMethods
  include RGeo::Feature::LineString
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::LineImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::LineStringMethods
  include RGeo::Feature::Line
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::LinearRingImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def ccw?(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_ccw?; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::LineStringMethods
  include RGeo::Feature::LinearRing
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::BasicLinearRingMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::PolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def interior_ring_n(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_interior_ring_n(idx); end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::ValidOp
  include RGeo::Feature::Polygon
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPolygonMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::GeometryCollectionImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Feature::GeometryCollection
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::MultiPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Feature::MultiPoint
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPointMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::MultiLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Cartesian::MultiLineStringMethods
  include RGeo::Feature::MultiLineString
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::MultiPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Cartesian::GeometryMethods
  include RGeo::Feature::MultiPolygon
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPolygonMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Cartesian::Factory
  def ==(other); end
  def collection(elems); end
  def coord_sys; end
  def coordinate_dimension; end
  def encode_with(coder); end
  def eql?(other); end
  def generate_wkb(obj); end
  def generate_wkt(obj); end
  def hash; end
  def init_with(coder); end
  def initialize(opts = nil); end
  def line(start, stop); end
  def line_string(points); end
  def linear_ring(points); end
  def marshal_dump; end
  def marshal_load(data); end
  def marshal_wkb_generator; end
  def marshal_wkb_parser; end
  def multi_line_string(elems); end
  def multi_point(elems); end
  def multi_polygon(elems); end
  def parse_wkb(str); end
  def parse_wkt(str); end
  def point(x, y, *extra); end
  def polygon(outer_ring, inner_rings = nil); end
  def property(name); end
  def psych_wkt_generator; end
  def psych_wkt_parser; end
  def spatial_dimension; end
  def srid; end
  include RGeo::Feature::Factory::Instance
  include RGeo::ImplHelper::Utils
end
class RGeo::Cartesian::BoundingBox
  def ==(other); end
  def add(geometry); end
  def add_geometry(geometry); end
  def add_point(point); end
  def center_m; end
  def center_x; end
  def center_y; end
  def center_z; end
  def contains?(rhs, opts = nil); end
  def degenerate?; end
  def empty?; end
  def eql?(other); end
  def factory; end
  def has_m; end
  def has_z; end
  def infinitesimal?; end
  def initialize(factory, opts = nil); end
  def m_span; end
  def max_m; end
  def max_point; end
  def max_x; end
  def max_y; end
  def max_z; end
  def min_m; end
  def min_point; end
  def min_x; end
  def min_y; end
  def min_z; end
  def self.create_from_geometry(geom, opts = nil); end
  def self.create_from_points(point1, point2, opts = nil); end
  def subdivide(opts = nil); end
  def to_geometry; end
  def x_span; end
  def y_span; end
  def z_span; end
end
module RGeo::Cartesian::Analysis
  def self.ccw?(ring); end
  def self.counter_clockwise?(ring); end
  def self.ring_direction(ring); end
end
class RGeo::Cartesian::SweeplineIntersector
  def create_event_pair(segment); end
  def events; end
  def initialize(segments); end
  def intersections; end
  def proper_intersections; end
  def segments; end
end
class RGeo::Cartesian::SweeplineIntersector::Event < Struct
  def is_start; end
  def is_start=(_); end
  def point; end
  def point=(_); end
  def segment; end
  def segment=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class RGeo::Cartesian::SweeplineIntersector::Intersection < Struct
  def point; end
  def point=(_); end
  def s1; end
  def s1=(_); end
  def s2; end
  def s2=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
class RGeo::Cartesian::PlanarGraph
  def add_edge(edge); end
  def add_edges(new_edges); end
  def compute_split_edges(seg, ints); end
  def create_half_edge(edge); end
  def create_half_edges; end
  def edges; end
  def incident_edges; end
  def initialize(edges = nil); end
  def insert_half_edge(half_edge); end
  def intersection_map; end
  def link_half_edges; end
end
class RGeo::Cartesian::PlanarGraph::HalfEdge
  def <=>(other); end
  def and_connected; end
  def angle; end
  def destination; end
  def initialize(origin); end
  def inspect; end
  def next; end
  def next=(arg0); end
  def origin; end
  def prev; end
  def prev=(arg0); end
  def self.from_edge(edge); end
  def to_s; end
  def twin; end
  def twin=(arg0); end
  include Comparable
end
class RGeo::Cartesian::GeometryGraph < RGeo::Cartesian::PlanarGraph
  def add_collection(col); end
  def add_geometry(geom); end
  def add_line_string(geom); end
  def add_polygon(geom); end
  def find_hedge(ring, ccw: nil); end
  def geom_edges; end
  def initialize(geom); end
  def parent_geometry; end
end
class RGeo::Cartesian::GeometryGraph::GeomEdge < Struct
  def exterior_edge; end
  def exterior_edge=(_); end
  def interior_edges; end
  def interior_edges=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.keyword_init?; end
  def self.members; end
  def self.new(*arg0); end
end
module RGeo::Geographic
  def self.coord_sys4055; end
  def self.coord_sys4326; end
  def self.projected_factory(opts = nil); end
  def self.simple_mercator_factory(opts = nil); end
  def self.spherical_factory(opts = nil); end
end
class RGeo::Geographic::Factory
  def ==(other); end
  def collection(elems); end
  def coord_sys; end
  def coordinate_dimension; end
  def encode_with(coder); end
  def eql?(other); end
  def generate_wkb(obj); end
  def generate_wkt(obj); end
  def has_projection?; end
  def hash; end
  def init_with(coder); end
  def initialize(impl_prefix, opts = nil); end
  def line(start, stop); end
  def line_string(points); end
  def linear_ring(points); end
  def marshal_dump; end
  def marshal_load(data_); end
  def marshal_wkb_generator; end
  def marshal_wkb_parser; end
  def multi_line_string(elems); end
  def multi_point(elems); end
  def multi_polygon(elems); end
  def parse_wkb(str); end
  def parse_wkt(str); end
  def point(x, y, *extra); end
  def polygon(outer_ring, inner_rings = nil); end
  def project(geometry); end
  def projection_factory; end
  def projection_limits_window; end
  def projection_wraps?; end
  def projector=(arg0); end
  def property(name); end
  def psych_wkt_generator; end
  def psych_wkt_parser; end
  def spatial_dimension; end
  def srid; end
  def unproject(geometry); end
  include RGeo::Feature::Factory::Instance
  include RGeo::ImplHelper::Utils
end
class RGeo::Geographic::ProjectedWindow
  def *(x_factor_, y_factor_ = nil); end
  def ==(other); end
  def center_point; end
  def center_xy; end
  def clamped_by(min_width_, min_height_, max_width_, max_height_); end
  def contains_point?(point_); end
  def contains_window?(window_); end
  def crosses_seam?; end
  def degenerate?; end
  def eql?(other); end
  def factory; end
  def hash; end
  def height; end
  def initialize(factory_, x_min_, y_min_, x_max_, y_max_, opts_ = nil); end
  def inspect; end
  def ne_point; end
  def nw_point; end
  def random_point; end
  def scaled_by(x_factor_, y_factor_ = nil); end
  def se_point; end
  def self.bounding_points(points_); end
  def self.for_corners(sw_, ne_); end
  def self.surrounding_point(point_, x_margin_ = nil, y_margin_ = nil); end
  def sw_point; end
  def to_s; end
  def width; end
  def with_margin(x_margin_, y_margin_ = nil); end
  def x_max; end
  def x_min; end
  def x_span; end
  def y_max; end
  def y_min; end
  def y_span; end
end
module RGeo::Geographic::SphericalMath
end
class RGeo::Geographic::SphericalMath::PointXYZ
  def %(other); end
  def *(other); end
  def ==(other); end
  def create_perpendicular; end
  def dist_to_point(rhs); end
  def eql?(other); end
  def initialize(x, y, z); end
  def latlon; end
  def lonlat; end
  def self.from_latlon(lat, lon); end
  def self.weighted_combination(pt1, wt1, pt2, wt2); end
  def to_s; end
  def x; end
  def y; end
  def z; end
end
class RGeo::Geographic::SphericalMath::ArcXYZ
  def ==(other); end
  def axis; end
  def contains_point?(obj); end
  def degenerate?; end
  def e; end
  def eql?(other); end
  def initialize(start, stop); end
  def intersects_arc?(obj); end
  def length; end
  def s; end
  def to_s; end
end
module RGeo::Geographic::SphericalGeometryMethods
  def coordinate_dimension; end
  def is_3d?; end
  def measured?; end
  def spatial_dimension; end
  def srid; end
end
module RGeo::Geographic::SphericalPointMethods
  def buffer(distance); end
  def distance(rhs); end
  def equals?(rhs); end
  def init_geometry; end
  def self.included(klass); end
  def xyz; end
end
module RGeo::Geographic::SphericalLineStringMethods
  def arcs; end
  def crosses?(rhs); end
  def crosses_line_string?(rhs); end
  def intersects?(rhs); end
  def intersects_line_string?(rhs); end
  def length; end
  def simple?; end
end
module RGeo::Geographic::SphericalMultiLineStringMethods
  def length; end
end
module RGeo::Geographic::SphericalPolygonMethods
  def centroid; end
end
class RGeo::Geographic::SphericalPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def lat(*args); end
  def latitude(*args); end
  def lon(*args); end
  def longitude(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_lat; end
  def unsafe_latitude; end
  def unsafe_lon; end
  def unsafe_longitude; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::Point
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalPointMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPointMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::LineString
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalLineStringMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalLineImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::Line
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalLineStringMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalLinearRingImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def ccw?(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_ccw?; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::LinearRing
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalLineStringMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::BasicLinearRingMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def interior_ring_n(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_interior_ring_n(idx); end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::Polygon
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalPolygonMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPolygonMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalGeometryCollectionImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::GeometryCollection
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalMultiPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(_another_geometry); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::MultiPoint
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPointMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalMultiLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::MultiLineString
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::Geographic::SphericalMultiLineStringMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiLineStringMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::SphericalMultiPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(_distance_); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(_another_geometry); end
  def unsafe_difference(_another_geometry); end
  def unsafe_disjoint?(_another_geometry); end
  def unsafe_distance(_another_geometry); end
  def unsafe_envelope; end
  def unsafe_intersection(_another_geometry); end
  def unsafe_intersects?(_another_geometry); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(_another_geometry); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(_another_geometry); end
  def unsafe_touches?(_another_geometry); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(_another_geometry); end
  def unsafe_within?(_another_geometry); end
  def within?(*args); end
  include RGeo::Feature::MultiPolygon
  include RGeo::Geographic::SphericalGeometryMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPolygonMethods
  include RGeo::ImplHelper::ValidOp
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::Projector
  def initialize(geography_factory, projection_factory); end
  def limits_window; end
  def project(geometry); end
  def projection_factory; end
  def self.create_from_existing_factory(geography_factory, projection_factory); end
  def self.create_from_opts(geography_factory, opts = nil); end
  def set_factories(geography_factory, projection_factory); end
  def unproject(geometry); end
  def wraps?; end
end
class RGeo::Geographic::SimpleMercatorProjector
  def initialize(geography_factory, opts = nil); end
  def limits_window; end
  def project(geometry); end
  def projection_factory; end
  def self._coordsys3857; end
  def set_factories(geography_factory, projection_factory); end
  def unproject(geometry); end
  def wraps?; end
end
module RGeo::Geographic::ProjectedGeometryMethods
  def boundary; end
  def buffer(distance); end
  def buffer_with_style(distance, end_cap_style, join_style, mitre_limit); end
  def contains?(rhs); end
  def convex_hull; end
  def coordinate_dimension; end
  def crosses?(rhs); end
  def difference(rhs); end
  def disjoint?(rhs); end
  def distance(rhs); end
  def empty?; end
  def envelope; end
  def equals?(rhs); end
  def intersection(rhs); end
  def intersects?(rhs); end
  def invalid_reason; end
  def is_3d?; end
  def make_valid; end
  def measured?; end
  def overlaps?(rhs); end
  def point_on_surface; end
  def projection; end
  def relate(rhs, pattern_); end
  def simple?; end
  def simplify(tolerance); end
  def simplify_preserve_topology(tolerance); end
  def spatial_dimension; end
  def srid; end
  def sym_difference(rhs); end
  def touches?(rhs); end
  def union(rhs); end
  def valid?; end
  def within?(rhs); end
end
module RGeo::Geographic::ProjectedPointMethods
  def canonical_lon; end
  def canonical_longitude; end
  def canonical_point; end
  def canonical_x; end
  def init_geometry; end
  def self.included(klass); end
end
module RGeo::Geographic::ProjectedNCurveMethods
  def length; end
end
module RGeo::Geographic::ProjectedLineStringMethods
  def init_geometry; end
end
module RGeo::Geographic::ProjectedLinearRingMethods
  def simple?; end
end
module RGeo::Geographic::ProjectedNSurfaceMethods
  def area; end
  def centroid; end
end
module RGeo::Geographic::ProjectedPolygonMethods
  def init_geometry; end
end
module RGeo::Geographic::ProjectedMultiPolygonMethods
  def init_geometry; end
end
class RGeo::Geographic::ProjectedPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def lat(*args); end
  def latitude(*args); end
  def lon(*args); end
  def longitude(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_lat; end
  def unsafe_latitude; end
  def unsafe_lon; end
  def unsafe_longitude; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(rhs); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::Point
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedPointMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPointMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(rhs); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::LineString
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedLineStringMethods
  include RGeo::Geographic::ProjectedNCurveMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedLinearRingImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def ccw?(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_ccw?; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(rhs); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::LinearRing
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedLineStringMethods
  include RGeo::Geographic::ProjectedLinearRingMethods
  include RGeo::Geographic::ProjectedNCurveMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::BasicLinearRingMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedLineImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def overlaps?(*args); end
  def relate?(*args); end
  def ring?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(rhs); end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_ring?; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::Line
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedLineStringMethods
  include RGeo::Geographic::ProjectedNCurveMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicLineMethods
  include RGeo::ImplHelper::BasicLineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def interior_ring_n(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_interior_ring_n(idx); end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_multiply(other); end
  def unsafe_overlaps?(rhs); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::Polygon
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedNSurfaceMethods
  include RGeo::Geographic::ProjectedPolygonMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicPolygonMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedGeometryCollectionImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(rhs); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::GeometryCollection
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedMultiPointImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(rhs); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::MultiPoint
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPointMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedMultiLineStringImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def length(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_length; end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(rhs); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::MultiLineString
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedNCurveMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiLineStringMethods
  include RGeo::ImplHelper::ValidityCheck
end
class RGeo::Geographic::ProjectedMultiPolygonImpl
  def *(*args); end
  def +(*args); end
  def -(*args); end
  def area(*args); end
  def boundary(*args); end
  def buffer(*args); end
  def centroid(*args); end
  def contains?(*args); end
  def convex_hull(*args); end
  def crosses?(*args); end
  def difference(*args); end
  def disjoint?(*args); end
  def distance(*args); end
  def envelope(*args); end
  def intersection(*args); end
  def intersects?(*args); end
  def node(*args); end
  def overlaps?(*args); end
  def point_on_surface(*args); end
  def relate?(*args); end
  def size(*args); end
  def sym_difference(*args); end
  def touches?(*args); end
  def transform(*args); end
  def unary_union(*args); end
  def union(*args); end
  def unsafe_add(other); end
  def unsafe_area; end
  def unsafe_boundary; end
  def unsafe_buffer(distance); end
  def unsafe_centroid; end
  def unsafe_contains?(rhs); end
  def unsafe_convex_hull; end
  def unsafe_crosses?(rhs); end
  def unsafe_difference(rhs); end
  def unsafe_disjoint?(rhs); end
  def unsafe_distance(rhs); end
  def unsafe_envelope; end
  def unsafe_intersection(rhs); end
  def unsafe_intersects?(rhs); end
  def unsafe_multiply(other); end
  def unsafe_node; end
  def unsafe_overlaps?(rhs); end
  def unsafe_point_on_surface; end
  def unsafe_relate?(_another_geometry, _intersection_pattern_matrix_); end
  def unsafe_remove(other); end
  def unsafe_size; end
  def unsafe_sym_difference(rhs); end
  def unsafe_touches?(rhs); end
  def unsafe_transform(other_factory); end
  def unsafe_unary_union; end
  def unsafe_union(rhs); end
  def unsafe_within?(rhs); end
  def within?(*args); end
  include RGeo::Feature::MultiPolygon
  include RGeo::Geographic::ProjectedGeometryMethods
  include RGeo::Geographic::ProjectedMultiPolygonMethods
  include RGeo::Geographic::ProjectedNSurfaceMethods
  include RGeo::ImplHelper::BasicGeometryCollectionMethods
  include RGeo::ImplHelper::BasicGeometryMethods
  include RGeo::ImplHelper::BasicMultiPolygonMethods
  include RGeo::ImplHelper::ValidityCheck
end
