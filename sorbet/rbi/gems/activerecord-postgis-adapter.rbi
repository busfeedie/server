# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/activerecord-postgis-adapter/all/activerecord-postgis-adapter.rbi
#
# activerecord-postgis-adapter-9.0.1

module ActiveRecord
end
module ActiveRecord::ConnectionAdapters
end
module ActiveRecord::ConnectionAdapters::PostGIS
end
module ActiveRecord::ConnectionAdapters::PostGIS::ColumnMethods
  def geography(name, options = nil); end
  def geometry(name, options = nil); end
  def geometry_collection(name, options = nil); end
  def line_string(name, options = nil); end
  def multi_line_string(name, options = nil); end
  def multi_point(name, options = nil); end
  def multi_polygon(name, options = nil); end
  def spatial(name, options = nil); end
  def st_point(name, options = nil); end
  def st_polygon(name, options = nil); end
  def valid_column_definition_options; end
end
class ActiveRecord::ConnectionAdapters::PostgreSQL::Table < ActiveRecord::ConnectionAdapters::Table
  include ActiveRecord::ConnectionAdapters::PostGIS::ColumnMethods
end
module ActiveRecord::ConnectionAdapters::PostGIS::SchemaStatements
  def create_table_definition(*args, **kwargs); end
  def new_column_from_field(table_name, field, _definitions); end
  def spatial_column_info(table_name); end
end
module ActiveRecord::ConnectionAdapters::PostGIS::DatabaseStatements
  def truncate_tables(*table_names); end
end
class ActiveRecord::ConnectionAdapters::PostGIS::SpatialColumnInfo
  def all; end
  def get(column_name, type); end
  def initialize(adapter, table_name); end
end
class ActiveRecord::ConnectionAdapters::PostGIS::TableDefinition < ActiveRecord::ConnectionAdapters::PostgreSQL::TableDefinition
  def new_column_definition(name, type, **options); end
  include ActiveRecord::ConnectionAdapters::PostGIS::ColumnMethods
end
module ActiveRecord::ConnectionAdapters::PostGIS::ColumnDefinitionUtils
  def self.default_srid(options); end
  def self.geo_type(type = nil); end
  def self.limit_from_options(type, options = nil); end
end
class ActiveRecord::ConnectionAdapters::PostGIS::SpatialColumn < ActiveRecord::ConnectionAdapters::PostgreSQL::Column
  def build_from_sql_type(sql_type); end
  def geographic; end
  def geographic?; end
  def geometric_type; end
  def has_m; end
  def has_m?; end
  def has_z; end
  def has_z?; end
  def initialize(name, default, sql_type_metadata = nil, null = nil, default_function = nil, collation: nil, comment: nil, serial: nil, generated: nil, spatial: nil, identity: nil); end
  def limit; end
  def set_geometric_type_from_name(name); end
  def spatial?; end
  def srid; end
  def to_type_name(geometric_type); end
end
module RGeo
end
module RGeo::ActiveRecord
end
module RGeo::ActiveRecord::SpatialToPostGISSql
  def visit_in_spatial_context(node, collector); end
end
module Arel
end
module Arel::Visitors
end
class Arel::Visitors::PostGIS < Arel::Visitors::PostgreSQL
  include RGeo::ActiveRecord::SpatialToSql
end
module ActiveRecord::ConnectionAdapters::PostGIS::OID
end
class ActiveRecord::ConnectionAdapters::PostGIS::OID::Spatial < ActiveModel::Type::Value
  def binary_string?(string); end
  def cast_value(value); end
  def factory_attrs; end
  def initialize(geo_type: nil, srid: nil, has_z: nil, has_m: nil, geographic: nil); end
  def parse_wkt(string); end
  def self.parse_sql_type(sql_type); end
  def serialize(value); end
  def spatial?; end
  def spatial_factory; end
  def type; end
  def wkt_parser(string); end
end
module ActiveRecord::ConnectionAdapters::PostGIS::OID::DateTime
  def real_type_unless_aliased(real_type); end
end
module ActiveRecord::ConnectionAdapters::PostGIS::Type
  def lookup(*args, adapter: nil, **kwargs); end
end
module ActiveRecord::ConnectionHandling
  def postgis_connection(config); end
end
class ActiveRecord::ConnectionAdapters::PostGISAdapter < ActiveRecord::ConnectionAdapters::PostgreSQLAdapter
  def arel_visitor; end
  def default_srid; end
  def postgis_lib_version; end
  def quote(value); end
  def quote_default_expression(value, column); end
  def self.initialize_type_map(map = nil); end
  def self.native_database_types; end
  def self.spatial_column_options(key); end
  def srs_database_columns; end
  include ActiveRecord::ConnectionAdapters::PostGIS::DatabaseStatements
  include ActiveRecord::ConnectionAdapters::PostGIS::SchemaStatements
end
