# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Route`.
# Please instead update this file by running `bin/tapioca dsl Route`.

class Route
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  include EnumMethodsModule
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def continuous_drop_offs; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def continuous_pickups; end

    sig { returns(T::Hash[T.any(String, Symbol), Integer]) }
    def route_types; end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Route).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def average(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.untyped) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T.untyped) }
    def count(column_name = nil); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def create(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def create!(attributes = nil, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def create_or_find_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Route]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Route)) }
    def fifth; end

    sig { returns(::Route) }
    def fifth!; end

    sig { params(args: T.untyped).returns(T.untyped) }
    def find(*args); end

    sig { params(args: T.untyped).returns(T.nilable(::Route)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Route) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: ::Route).void)
      ).returns(T.nilable(T::Enumerator[::Route]))
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.nilable(T.proc.params(object: T::Array[::Route]).void)
      ).returns(T.nilable(T::Enumerator[T::Enumerator[::Route]]))
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def find_or_create_by(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def find_or_create_by!(attributes, &block); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Route)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Route) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Route) }
    def find_sole_by(arg, *args); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def first(limit = nil); end

    sig { returns(::Route) }
    def first!; end

    sig { returns(T.nilable(::Route)) }
    def forty_two; end

    sig { returns(::Route) }
    def forty_two!; end

    sig { returns(T.nilable(::Route)) }
    def fourth; end

    sig { returns(::Route) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.nilable(T.proc.params(object: PrivateRelation).void)
      ).returns(T.nilable(::ActiveRecord::Batches::BatchEnumerator))
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def last(limit = nil); end

    sig { returns(::Route) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Route).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(attributes: T.untyped, block: T.nilable(T.proc.params(object: ::Route).void)).returns(::Route) }
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Route).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Route).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Route)) }
    def second; end

    sig { returns(::Route) }
    def second!; end

    sig { returns(T.nilable(::Route)) }
    def second_to_last; end

    sig { returns(::Route) }
    def second_to_last!; end

    sig { returns(::Route) }
    def sole; end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T.untyped)
    end
    def sum(column_name = nil, &block); end

    sig { params(limit: T.untyped).returns(T.untyped) }
    def take(limit = nil); end

    sig { returns(::Route) }
    def take!; end

    sig { returns(T.nilable(::Route)) }
    def third; end

    sig { returns(::Route) }
    def third!; end

    sig { returns(T.nilable(::Route)) }
    def third_to_last; end

    sig { returns(::Route) }
    def third_to_last!; end
  end

  module EnumMethodsModule
    sig { void }
    def bus!; end

    sig { returns(T::Boolean) }
    def bus?; end

    sig { void }
    def cable_car!; end

    sig { returns(T::Boolean) }
    def cable_car?; end

    sig { void }
    def cable_tram!; end

    sig { returns(T::Boolean) }
    def cable_tram?; end

    sig { void }
    def continuous_drop_off_continuous!; end

    sig { returns(T::Boolean) }
    def continuous_drop_off_continuous?; end

    sig { void }
    def continuous_drop_off_coordinate!; end

    sig { returns(T::Boolean) }
    def continuous_drop_off_coordinate?; end

    sig { void }
    def continuous_drop_off_none!; end

    sig { returns(T::Boolean) }
    def continuous_drop_off_none?; end

    sig { void }
    def continuous_drop_off_phone!; end

    sig { returns(T::Boolean) }
    def continuous_drop_off_phone?; end

    sig { void }
    def continuous_pickup_continuous!; end

    sig { returns(T::Boolean) }
    def continuous_pickup_continuous?; end

    sig { void }
    def continuous_pickup_coordinate!; end

    sig { returns(T::Boolean) }
    def continuous_pickup_coordinate?; end

    sig { void }
    def continuous_pickup_none!; end

    sig { returns(T::Boolean) }
    def continuous_pickup_none?; end

    sig { void }
    def continuous_pickup_phone!; end

    sig { returns(T::Boolean) }
    def continuous_pickup_phone?; end

    sig { void }
    def ferry!; end

    sig { returns(T::Boolean) }
    def ferry?; end

    sig { void }
    def funicular!; end

    sig { returns(T::Boolean) }
    def funicular?; end

    sig { void }
    def metro!; end

    sig { returns(T::Boolean) }
    def metro?; end

    sig { void }
    def monorail!; end

    sig { returns(T::Boolean) }
    def monorail?; end

    sig { void }
    def rail!; end

    sig { returns(T::Boolean) }
    def rail?; end

    sig { void }
    def tram!; end

    sig { returns(T::Boolean) }
    def tram?; end

    sig { void }
    def trolleybus!; end

    sig { returns(T::Boolean) }
    def trolleybus?; end
  end

  module GeneratedAssociationMethods
    sig { returns(T.nilable(::Agency)) }
    def agency; end

    sig { params(value: T.nilable(::Agency)).void }
    def agency=(value); end

    sig { returns(T.nilable(::App)) }
    def app; end

    sig { params(value: T.nilable(::App)).void }
    def app=(value); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def build_agency(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::App) }
    def build_app(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def create_agency(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Agency) }
    def create_agency!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::App) }
    def create_app(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::App) }
    def create_app!(*args, &blk); end

    sig { returns(T.nilable(::Agency)) }
    def reload_agency; end

    sig { returns(T.nilable(::App)) }
    def reload_app; end

    sig { returns(T::Array[T.untyped]) }
    def trip_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def trip_ids=(ids); end

    # This method is created by ActiveRecord on the `Route` class because it declared `has_many :trips`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Trip::PrivateCollectionProxy) }
    def trips; end

    sig { params(value: T::Enumerable[::Trip]).void }
    def trips=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def bus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cable_car(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def cable_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_drop_off_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_drop_off_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_drop_off_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_drop_off_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_pickup_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_pickup_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_pickup_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def continuous_pickup_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ferry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def funicular(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert!(attributes, returning: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def insert_all(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass))
      ).returns(ActiveRecord::Result)
    end
    def insert_all!(attributes, returning: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def metro(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def monorail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_bus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cable_car(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_cable_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_drop_off_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_drop_off_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_drop_off_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_drop_off_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_pickup_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_pickup_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_pickup_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_continuous_pickup_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_ferry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_funicular(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_metro(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_monorail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_rail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def not_trolleybus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def trolleybus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig do
      params(
        attributes: Hash,
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert(attributes, returning: nil, unique_by: nil); end

    sig do
      params(
        attributes: T::Array[Hash],
        returning: T.nilable(T.any(T::Array[Symbol], FalseClass)),
        unique_by: T.nilable(T.any(T::Array[Symbol], Symbol))
      ).returns(ActiveRecord::Result)
    end
    def upsert_all(attributes, returning: nil, unique_by: nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::Integer)) }
    def agency_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def agency_id=(value); end

    sig { returns(T::Boolean) }
    def agency_id?; end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_before_last_save; end

    sig { returns(T.untyped) }
    def agency_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def agency_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def agency_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def agency_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def agency_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def agency_id_was; end

    sig { void }
    def agency_id_will_change!; end

    sig { returns(::Integer) }
    def app_id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def app_id=(value); end

    sig { returns(T::Boolean) }
    def app_id?; end

    sig { returns(T.nilable(::Integer)) }
    def app_id_before_last_save; end

    sig { returns(T.untyped) }
    def app_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def app_id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def app_id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def app_id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def app_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def app_id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def app_id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def app_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def app_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def app_id_was; end

    sig { void }
    def app_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def continuous_drop_off; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def continuous_drop_off=(value); end

    sig { returns(T::Boolean) }
    def continuous_drop_off?; end

    sig { returns(T.nilable(::String)) }
    def continuous_drop_off_before_last_save; end

    sig { returns(T.untyped) }
    def continuous_drop_off_before_type_cast; end

    sig { returns(T::Boolean) }
    def continuous_drop_off_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_drop_off_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_drop_off_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def continuous_drop_off_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def continuous_drop_off_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_drop_off_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def continuous_drop_off_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def continuous_drop_off_previously_was; end

    sig { returns(T.nilable(::String)) }
    def continuous_drop_off_was; end

    sig { void }
    def continuous_drop_off_will_change!; end

    sig { returns(T.nilable(::String)) }
    def continuous_pickup; end

    sig do
      params(
        value: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T.nilable(T.any(::String, ::Symbol, ::Integer)))
    end
    def continuous_pickup=(value); end

    sig { returns(T::Boolean) }
    def continuous_pickup?; end

    sig { returns(T.nilable(::String)) }
    def continuous_pickup_before_last_save; end

    sig { returns(T.untyped) }
    def continuous_pickup_before_type_cast; end

    sig { returns(T::Boolean) }
    def continuous_pickup_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_pickup_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_pickup_change_to_be_saved; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def continuous_pickup_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def continuous_pickup_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def continuous_pickup_previous_change; end

    sig do
      params(
        from: T.nilable(T.any(::String, ::Symbol, ::Integer)),
        to: T.nilable(T.any(::String, ::Symbol, ::Integer))
      ).returns(T::Boolean)
    end
    def continuous_pickup_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def continuous_pickup_previously_was; end

    sig { returns(T.nilable(::String)) }
    def continuous_pickup_was; end

    sig { void }
    def continuous_pickup_will_change!; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::String) }
    def gtfs_agency_id; end

    sig { params(value: ::String).returns(::String) }
    def gtfs_agency_id=(value); end

    sig { returns(T::Boolean) }
    def gtfs_agency_id?; end

    sig { returns(T.nilable(::String)) }
    def gtfs_agency_id_before_last_save; end

    sig { returns(T.untyped) }
    def gtfs_agency_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def gtfs_agency_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_agency_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_agency_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def gtfs_agency_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_agency_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_agency_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def gtfs_agency_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_agency_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gtfs_agency_id_was; end

    sig { void }
    def gtfs_agency_id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def gtfs_network_id; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def gtfs_network_id=(value); end

    sig { returns(T::Boolean) }
    def gtfs_network_id?; end

    sig { returns(T.nilable(::String)) }
    def gtfs_network_id_before_last_save; end

    sig { returns(T.untyped) }
    def gtfs_network_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def gtfs_network_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gtfs_network_id_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gtfs_network_id_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gtfs_network_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_network_id_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def gtfs_network_id_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def gtfs_network_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_network_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gtfs_network_id_was; end

    sig { void }
    def gtfs_network_id_will_change!; end

    sig { returns(::String) }
    def gtfs_route_id; end

    sig { params(value: ::String).returns(::String) }
    def gtfs_route_id=(value); end

    sig { returns(T::Boolean) }
    def gtfs_route_id?; end

    sig { returns(T.nilable(::String)) }
    def gtfs_route_id_before_last_save; end

    sig { returns(T.untyped) }
    def gtfs_route_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def gtfs_route_id_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_route_id_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_route_id_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def gtfs_route_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_route_id_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def gtfs_route_id_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def gtfs_route_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def gtfs_route_id_previously_was; end

    sig { returns(T.nilable(::String)) }
    def gtfs_route_id_was; end

    sig { void }
    def gtfs_route_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { void }
    def restore_agency_id!; end

    sig { void }
    def restore_app_id!; end

    sig { void }
    def restore_continuous_drop_off!; end

    sig { void }
    def restore_continuous_pickup!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_gtfs_agency_id!; end

    sig { void }
    def restore_gtfs_network_id!; end

    sig { void }
    def restore_gtfs_route_id!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_route_color!; end

    sig { void }
    def restore_route_desc!; end

    sig { void }
    def restore_route_long_name!; end

    sig { void }
    def restore_route_short_name!; end

    sig { void }
    def restore_route_sort_order!; end

    sig { void }
    def restore_route_text_color!; end

    sig { void }
    def restore_route_type!; end

    sig { void }
    def restore_route_url!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable(::String)) }
    def route_color; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_color=(value); end

    sig { returns(T::Boolean) }
    def route_color?; end

    sig { returns(T.nilable(::String)) }
    def route_color_before_last_save; end

    sig { returns(T.untyped) }
    def route_color_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_color_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_color_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_color_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_color_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_color_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_color_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_color_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_color_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_color_was; end

    sig { void }
    def route_color_will_change!; end

    sig { returns(T.nilable(::String)) }
    def route_desc; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_desc=(value); end

    sig { returns(T::Boolean) }
    def route_desc?; end

    sig { returns(T.nilable(::String)) }
    def route_desc_before_last_save; end

    sig { returns(T.untyped) }
    def route_desc_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_desc_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_desc_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_desc_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_desc_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_desc_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_desc_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_desc_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_desc_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_desc_was; end

    sig { void }
    def route_desc_will_change!; end

    sig { returns(T.nilable(::String)) }
    def route_long_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_long_name=(value); end

    sig { returns(T::Boolean) }
    def route_long_name?; end

    sig { returns(T.nilable(::String)) }
    def route_long_name_before_last_save; end

    sig { returns(T.untyped) }
    def route_long_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_long_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_long_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_long_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_long_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_long_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_long_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_long_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_long_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_long_name_was; end

    sig { void }
    def route_long_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def route_short_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_short_name=(value); end

    sig { returns(T::Boolean) }
    def route_short_name?; end

    sig { returns(T.nilable(::String)) }
    def route_short_name_before_last_save; end

    sig { returns(T.untyped) }
    def route_short_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_short_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_short_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_short_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_short_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_short_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_short_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_short_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_short_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_short_name_was; end

    sig { void }
    def route_short_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def route_sort_order; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def route_sort_order=(value); end

    sig { returns(T::Boolean) }
    def route_sort_order?; end

    sig { returns(T.nilable(::Integer)) }
    def route_sort_order_before_last_save; end

    sig { returns(T.untyped) }
    def route_sort_order_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_sort_order_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def route_sort_order_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def route_sort_order_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def route_sort_order_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def route_sort_order_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def route_sort_order_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def route_sort_order_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def route_sort_order_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def route_sort_order_was; end

    sig { void }
    def route_sort_order_will_change!; end

    sig { returns(T.nilable(::String)) }
    def route_text_color; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_text_color=(value); end

    sig { returns(T::Boolean) }
    def route_text_color?; end

    sig { returns(T.nilable(::String)) }
    def route_text_color_before_last_save; end

    sig { returns(T.untyped) }
    def route_text_color_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_text_color_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_text_color_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_text_color_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_text_color_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_text_color_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_text_color_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_text_color_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_text_color_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_text_color_was; end

    sig { void }
    def route_text_color_will_change!; end

    sig { returns(::String) }
    def route_type; end

    sig { params(value: T.any(::String, ::Symbol, ::Integer)).returns(T.any(::String, ::Symbol, ::Integer)) }
    def route_type=(value); end

    sig { returns(T::Boolean) }
    def route_type?; end

    sig { returns(T.nilable(::String)) }
    def route_type_before_last_save; end

    sig { returns(T.untyped) }
    def route_type_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_type_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def route_type_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def route_type_change_to_be_saved; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def route_type_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_type_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def route_type_previous_change; end

    sig do
      params(
        from: T.any(::String, ::Symbol, ::Integer),
        to: T.any(::String, ::Symbol, ::Integer)
      ).returns(T::Boolean)
    end
    def route_type_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_type_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_type_was; end

    sig { void }
    def route_type_will_change!; end

    sig { returns(T.nilable(::String)) }
    def route_url; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def route_url=(value); end

    sig { returns(T::Boolean) }
    def route_url?; end

    sig { returns(T.nilable(::String)) }
    def route_url_before_last_save; end

    sig { returns(T.untyped) }
    def route_url_before_type_cast; end

    sig { returns(T::Boolean) }
    def route_url_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_url_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_url_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_url_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_url_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def route_url_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def route_url_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def route_url_previously_was; end

    sig { returns(T.nilable(::String)) }
    def route_url_was; end

    sig { void }
    def route_url_will_change!; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_agency_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_agency_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_app_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_app_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_continuous_drop_off; end

    sig { returns(T::Boolean) }
    def saved_change_to_continuous_drop_off?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_continuous_pickup; end

    sig { returns(T::Boolean) }
    def saved_change_to_continuous_pickup?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_gtfs_agency_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_gtfs_agency_id?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_gtfs_network_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_gtfs_network_id?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_gtfs_route_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_gtfs_route_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_color; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_color?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_desc; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_desc?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_long_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_long_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_short_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_short_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_route_sort_order; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_sort_order?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_text_color; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_text_color?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_route_type; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_type?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_route_url; end

    sig { returns(T::Boolean) }
    def saved_change_to_route_url?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_agency_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_app_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_continuous_drop_off?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_continuous_pickup?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gtfs_agency_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gtfs_network_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_gtfs_route_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_color?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_desc?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_long_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_short_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_sort_order?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_text_color?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_type?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_route_url?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def bus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cable_car(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def cable_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_drop_off_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_drop_off_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_drop_off_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_drop_off_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_pickup_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_pickup_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_pickup_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def continuous_pickup_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def distinct(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extract_associated(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ferry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def funicular(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def metro(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def monorail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_bus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cable_car(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_cable_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_drop_off_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_drop_off_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_drop_off_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_drop_off_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_pickup_continuous(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_pickup_coordinate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_pickup_none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_continuous_pickup_phone(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_ferry(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_funicular(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_metro(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_monorail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_rail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def not_trolleybus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rail(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def tram(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def trolleybus(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationWhereChain) }
    def where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Route } }

    sig { returns(T::Array[::Route]) }
    def to_ary; end
  end

  class PrivateAssociationRelationWhereChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Route } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Route } }

    sig do
      params(
        records: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig do
      params(
        records: T.any(::Route, Integer, String, T::Enumerable[T.any(::Route, Integer, String, T::Enumerable[::Route])])
      ).returns(T::Array[::Route])
    end
    def delete(*records); end

    sig do
      params(
        records: T.any(::Route, Integer, String, T::Enumerable[T.any(::Route, Integer, String, T::Enumerable[::Route])])
      ).returns(T::Array[::Route])
    end
    def destroy(*records); end

    sig { returns(T::Array[::Route]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Route, T::Enumerable[T.any(::Route, T::Enumerable[::Route])])
      ).returns(T::Array[::Route])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Route]) }
    def target; end

    sig { returns(T::Array[::Route]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Route } }

    sig { returns(T::Array[::Route]) }
    def to_ary; end
  end

  class PrivateRelationWhereChain < PrivateRelation
    Elem = type_member { { fixed: ::Route } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end
end
